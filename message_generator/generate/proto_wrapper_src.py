from lower_case_acronym import *


def generate_proto_wrapper_src(directory, include_extension, src_extension):
    """
    Protowrapper is used to create a Managed C which calls c++ 
    Function will create the protowrapper source file in .../Protowrapper
    File has 3 main parts    
        -class node        
            -public send_message
            -public native functions
            -public register message and  private helper message methods        
            -callback data type functions on_message
    """
    #load header structure and the messages in variables from xml file
    import xml.etree.ElementTree as ET
    tree = ET.parse('message_definition.xml')
    protocol = tree.findall('message')
    header = tree.find('header')
    tab = '   '
    #open file
    f = open(directory + 'proto_wrapper' + src_extension, 'w')
    f.write('/* This file was autogenerated. All changes will be undone. */\n\n')
    f.write('#include <proto_wrapper'+include_extension+'>\n')
    f.write('using namespace Protonet;\n\n')
    #constructor
    f.write('Node::Node(uint8_t node_id)\n{\n')
    f.write(tab+'node = new protonet::node(node_id);\n')
    f.write('}\n\nNode::~Node()\n{\n')
    f.write(tab+'delete(node);\n}\n\n')
    f.write('void Node::Start()\n{\n')
    f.write(tab+'node->start();\n}\n\n')
    #send_message methods
    for message in protocol:
        name = message.get('name')
        cs_name = message.get('name').replace("_","")
        variable_name = lower_case_acronym(name)
        type_t_name = variable_name + "_t"
        f.write('void Node::Send'+ cs_name+'(\n')
        f.write(tab+'uint8_t dest_id,')
        for field in message:
            f.write('\n'+tab+field.get('type')+' '+ field.get('name')+',')
        f.seek(-1, 1)
        f.write(')\n{\n')
        f.write(tab+'node->send_'+variable_name+'(\n')
        f.write(tab+'dest_id,')
        for field in message:
            f.write('\n'+tab+field.get('name')+',')
        f.seek(-1, 1)
        f.write(');\n}\n\n')
    #public native methods
    f.write(r'''void Node::AddUDPDatalink([System::Runtime::InteropServices::Out]int8_t% link_id,uint16_t port)
{
	int8_t link_data;
	node->add_udp(&link_data, port);
	link_id = link_data;
}
void Node::AddUDPDatalink([System::Runtime::InteropServices::Out]int8_t% link_id,uint16_t port, String^ addr)
{
	IntPtr addr_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(addr);
	if(sizeof(addr_ptr)>16)
	{
		return;
	}
	int8_t link_data;
	node->add_udp(&link_data, port, static_cast<char*>(addr_ptr.ToPointer()));
	link_id = link_data;
}

void Node::EstablishUDPEndpoint(int8_t link_id, uint8_t node_id, uint16_t port, String^ addr)
{
	IntPtr addr_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(addr);
	if(sizeof(addr_ptr)>16)
	{
		return;
	}
	node->establish_udp(link_id, node_id, port, static_cast<char*>(addr_ptr.ToPointer()));
}

void Node::AddSerialDatalink([System::Runtime::InteropServices::Out]int8_t% link_id, uint32_t baud_rate, String^ device_path)
{
	IntPtr device_path_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(device_path);
	if(sizeof(device_path_ptr)>16)
	{
		return;
	}
	int8_t link_data;
	node->add_serial(&link_data, baud_rate, static_cast<char*>(device_path_ptr.ToPointer()));
	link_id = link_data;
}

void Node::EstablishSerialEndpoint(int8_t link_id, uint8_t node_id)
{
	node->establish_serial(link_id,node_id);
}'''+'\n\n')
    #public register messages and helper message methods
    for message in protocol:
        name = message.get('name')
        cs_name = message.get('name').replace("_","")
        variable_name = lower_case_acronym(name)
        type_t_name = variable_name + "_t"
        f.write('void* Node::'+cs_name+'Helper(int8_t link_id, proto_header_t header, '+type_t_name+' '+variable_name+', protonet::node* ptr)\n{\n')
        f.write(tab+'Header^ managed_header = gcnew Header(header);\n')
        f.write(tab+cs_name+'^ managed_'+variable_name+' = gcnew '+cs_name+'('+variable_name+');\n')
        f.write(tab+'On'+cs_name+'Delegate(link_id, managed_header, managed_'+variable_name+', this);\n')
        f.write(tab+'return 0;\n}\n\n')
        f.write('void Node::Register'+cs_name+'Event('+cs_name+'Delegate^ '+cs_name+'Event)\n{\n')
        f.write(tab+'On'+cs_name+'Delegate = '+cs_name+'Event;\n')
        f.write(tab+'On'+cs_name+'Callback = gcnew '+cs_name+'Callback(this, &Node::'+cs_name+'Helper);\n')
        f.write(tab+'On'+cs_name+'Ptr = Marshal::GetFunctionPointerForDelegate(On'+cs_name+'Callback);\n')
        f.write(tab+'node->register_on_'+variable_name+'(static_cast<protonet::'+variable_name+'_callback>(On'+cs_name+'Ptr.ToPointer()));\n')
        f.write('}\n\n')
        
    print("Created: " + 'proto_wrapper' + src_extension)