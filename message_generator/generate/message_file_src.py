
from check_valid_type import *

def generate_message_file_src(directory, include_extension, src_extension):
    """
    Function will create the message source file in .../src/
    File has 3 main parts
        -pack sync
        -pack checksum
        -pack /unpack header
    """
    #load header structure and the messages in variables from xml file
    import xml.etree.ElementTree as ET
    tree = ET.parse('message_definition.xml')
    protocol = tree.findall('message')
    header = tree.find('header')
    tab = '   '            
    #open file
    f = open(directory + "src/" + 'protonet_message' + src_extension, 'w')
    # warning
    f.write('/* This file was autogenerated. All changes will be undone. */\n\n')
    # includes
    f.write('#include <string.h>\n')
    f.write('#include <stdio.h>\n')
    f.write('#include <protonet_marshal'+include_extension+'>\n')
    f.write('#include <protonet_message'+include_extension+'>\n\n')
    
    #pack sync functions
    f.write('msg_offset pack_sync(msg_offset offset)\n')
    f.write('{\n')
    f.write(tab + "*offset = 'C\';\n")
    f.write(tab + "*(offset+1) = 'P\';\n")
    f.write(tab + "*(offset+2) = 'P\';\n")
    f.write(tab + "*(offset+3) = 0;\n")
    f.write(tab + 'return offset+4;\n')
    f.write('}\n\n')
    
    #pack checksum function
    f.write('msg_offset pack_checksum(\n')
    f.write(tab + 'const msg_offset start,\n')
    f.write(tab + 'const msg_offset end)\n')
    f.write('{\n')
    f.write('''	msg_offset current = start;
	checksum_t checksum = 0;
	while(current != end )
	{
		checksum += *current;
		current++;
	}
	*end = (int8_t)(~checksum)+1;
	return current+1;''')
    f.write('\n}\n\n')

    #pack header function
    f.write('msg_offset pack_header(\n')
    f.write(tab + 'proto_header_t* header,\n')
    f.write(tab + 'msg_offset offset)\n')
    f.write('{\n')
    for field in header:
        if(check_valid_type(field.get('type')) == 0):
            print 'error: field: '+ field.get('name') + ' in header has invalid type.'
        f.write(tab + 'offset = pack_'+field.get('type') + '(header->' + field.get('name') + ', offset);\n')    
    f.write(tab+ 'return offset;\n')
    f.write('}\n\n')
    
    #unpack header function
    f.write('msg_offset unpack_header(\n')
    f.write(tab + 'msg_offset offset,\n')
    f.write(tab + 'proto_header_t* out_ptr)\n')        
    f.write('{\n')
    for field in header:
        if(check_valid_type(field.get('type')) == 0):
            print 'error: field: '+ field.get('name') + ' in header has invalid type.'
        f.write(tab + 'offset = unpack_'+field.get('type') + '(offset, &out_ptr->' + field.get('name') + ');\n')    
    f.write(tab+ 'return offset;\n')
    f.write('}\n')

    print("Created: " + 'protonet_message' + src_extension)