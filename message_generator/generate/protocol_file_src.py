from .lower_case_acronym import *

def generate_protocol_file_src(directory, include_extension, src_extension):
    """
    Function will create the protocol source file in .../src/
    File has 3 main parts
        -declare msg_data_offset
        -create function unpack for all messages
        -create function com_typestr for all messages
    """
    #load header structure and the messages in variables from xml file
    import xml.etree.ElementTree as ET
    tree = ET.parse('message_definition.xml')
    protocol = tree.findall('message')
    header = tree.find('header')
    tab = '   '    
    #open file
    f = open(directory + "/src/" + 'comnet_protocol' + src_extension, 'w')
    # warning
    f.write('/* This file was autogenerated. All changes will be undone. */\n\n')
    f.write('#include <comnet_protocol' +include_extension+'>\n\n')
    
    #declare msg_data_offset
    f.write('const uint8_t msg_data_offset = 28;\n\n')
    #create function unpack for all messages
    f.write('void unpack_com_msg_t(\n')
    f.write(tab+ 'com_msg_t* msg,\n')
    f.write(tab+ 'com_msg_buf_t* buf)\n')
    f.write('{\n')
    f.write(tab+ 'uint8_t* unpack_offset = msg->data+msg_data_offset;\n')
    f.write(tab+ 'switch(msg->header.message_type)\n')
    f.write(tab+'{\n')
    for message in protocol:
        name = message.get('name')
        variable_name = lower_case_acronym(name)
        type_t_name = variable_name + "_t"        
        f.write(tab + 'case Com_'+name+':\n')
        f.write(tab+tab+'unpack_'+variable_name+'(unpack_offset, &buf->'+variable_name+');\n')
        f.write(tab+tab+'break;\n')
    f.write(tab+'default:\n')        
    f.write(tab+tab+'break;\n')
    f.write(tab+'}\n')
    f.write('}\n\n')
    
    #create function proto_typestr for all messages
    f.write('char* com_typestr(com_msg_type_t msg_type)\n')
    f.write('{\n')
    for message in protocol:
        name = message.get('name')
        print_name = name.replace("_", " ")
        f.write(tab + 'if(msg_type == Com_'+name+')\n')
        f.write(tab + '{\n')
        f.write(tab+tab+'return "'+ print_name + '";\n')
        f.write(tab + '}\n')
    f.write(tab + 'return 0;\n')
    f.write('}')

    print("Created: " + 'comnet_protocol' + src_extension)
