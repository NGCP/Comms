/* This file was autogenerated. All changes will be undone. */

#include <string.h>
#include <stdio.h>
#include <protonet_marshal.h>
#include <protonet_message.h>

msg_offset pack_sync(msg_offset offset)
{
   *offset = 'C';
   *(offset+1) = 'P';
   *(offset+2) = 'P';
   *(offset+3) = 0;
   return offset+4;
}

msg_offset pack_checksum(
   const msg_offset start,
   const msg_offset end)
{
	msg_offset current = start;
	checksum_t checksum = 0;
	while(current != end )
	{
		checksum += *current;
		current++;
	}
	*end = (int8_t)(~checksum)+1;
	return current+1;
}

msg_offset pack_header(
   proto_header_t* header,
   msg_offset offset)
{
   offset = pack_uint8_t(header->node_src_id, offset);
   offset = pack_uint8_t(header->node_dest_id, offset);
   offset = pack_uint8_t(header->sequence_number, offset);
   offset = pack_uint8_t(header->message_ttl, offset);
   offset = pack_uint16_t(header->message_type, offset);
   offset = pack_uint16_t(header->message_length, offset);
   return offset;
}

msg_offset unpack_header(
   msg_offset offset,
   proto_header_t* out_ptr)
{
   offset = unpack_uint8_t(offset, &out_ptr->node_src_id);
   offset = unpack_uint8_t(offset, &out_ptr->node_dest_id);
   offset = unpack_uint8_t(offset, &out_ptr->sequence_number);
   offset = unpack_uint8_t(offset, &out_ptr->message_ttl);
   offset = unpack_uint16_t(offset, &out_ptr->message_type);
   offset = unpack_uint16_t(offset, &out_ptr->message_length);
   return offset;
}
