/** @file This file was autogenerated. All changes will be undone.
Wrapper Class is used to call c++ function through managed c++/cli for c# */

#ifndef _PROTO_WRAPPER_H_
#define _PROTO_WRAPPER_H_

#include <stdio.h>
#include <vcclr.h>
#include <protonet.h>
#using <mscorlib.dll>

using namespace System;
using namespace System::Runtime::InteropServices;

namespace Protonet
{
   /** Redefines C++ header struct in c# any changes in c++ should also be made here*/ 
   public ref struct Header
   {
      uint8_t node_src_id;
      uint8_t node_dest_id;
      uint8_t sequence_number;
      uint8_t message_ttl;
      uint16_t message_type;
      uint16_t message_length;
      Header(){}
      Header(const Header% to_copy)
      {
         node_src_id = to_copy.node_src_id;
         node_dest_id = to_copy.node_dest_id;
         sequence_number = to_copy.sequence_number;
         message_ttl = to_copy.message_ttl;
         message_type = to_copy.message_type;
         message_length = to_copy.message_length;
      }
      Header(const proto_header_t to_copy)
      {
         node_src_id = to_copy.node_src_id;
         node_dest_id = to_copy.node_dest_id;
         sequence_number = to_copy.sequence_number;
         message_ttl = to_copy.message_ttl;
         message_type = to_copy.message_type;
         message_length = to_copy.message_length;
      }
   };

   /** Redefine c++ Enter struct as c# struct which is auto generated*/ 
   public ref struct Enter
   {
      float64_t timestamp;
      Enter(){}
      Enter(const Enter% to_copy)
      {
         timestamp = to_copy.timestamp;
      }
      Enter(const enter_t to_copy)
      {
         timestamp = to_copy.timestamp;
      }
   };

   /** Redefine c++ Exit struct as c# struct which is auto generated*/ 
   public ref struct Exit
   {
      float64_t timestamp;
      Exit(){}
      Exit(const Exit% to_copy)
      {
         timestamp = to_copy.timestamp;
      }
      Exit(const exit_t to_copy)
      {
         timestamp = to_copy.timestamp;
      }
   };

   /** Redefine c++ Ping struct as c# struct which is auto generated*/ 
   public ref struct Ping
   {
      float64_t timestamp;
      Ping(){}
      Ping(const Ping% to_copy)
      {
         timestamp = to_copy.timestamp;
      }
      Ping(const ping_t to_copy)
      {
         timestamp = to_copy.timestamp;
      }
   };

   /** Redefine c++ Pong struct as c# struct which is auto generated*/ 
   public ref struct Pong
   {
      float64_t timestamp;
      Pong(){}
      Pong(const Pong% to_copy)
      {
         timestamp = to_copy.timestamp;
      }
      Pong(const pong_t to_copy)
      {
         timestamp = to_copy.timestamp;
      }
   };

   /** Redefine c++ Vehicle_Identification struct as c# struct which is auto generated*/ 
   public ref struct VehicleIdentification
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      uint8_t vehicle_type;
      uint16_t owner_ID;
      VehicleIdentification(){}
      VehicleIdentification(const VehicleIdentification% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         vehicle_type = to_copy.vehicle_type;
         owner_ID = to_copy.owner_ID;
      }
      VehicleIdentification(const vehicle_identification_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         vehicle_type = to_copy.vehicle_type;
         owner_ID = to_copy.owner_ID;
      }
   };

   /** Redefine c++ Amy_Stuff struct as c# struct which is auto generated*/ 
   public ref struct AmyStuff
   {
      float64_t hello;
      AmyStuff(){}
      AmyStuff(const AmyStuff% to_copy)
      {
         hello = to_copy.hello;
      }
      AmyStuff(const amy_stuff_t to_copy)
      {
         hello = to_copy.hello;
      }
   };

   /** Redefine c++ Vehicle_Authorization_Request struct as c# struct which is auto generated*/ 
   public ref struct VehicleAuthorizationRequest
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      uint8_t link_key;
      uint8_t requested_services;
      uint8_t handover_node;
      VehicleAuthorizationRequest(){}
      VehicleAuthorizationRequest(const VehicleAuthorizationRequest% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         link_key = to_copy.link_key;
         requested_services = to_copy.requested_services;
         handover_node = to_copy.handover_node;
      }
      VehicleAuthorizationRequest(const vehicle_authorization_request_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         link_key = to_copy.link_key;
         requested_services = to_copy.requested_services;
         handover_node = to_copy.handover_node;
      }
   };

   /** Redefine c++ Vehicle_Authorization_Reply struct as c# struct which is auto generated*/ 
   public ref struct VehicleAuthorizationReply
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      uint8_t vehicle_type;
      uint8_t authorized_services;
      uint8_t granted_services;
      VehicleAuthorizationReply(){}
      VehicleAuthorizationReply(const VehicleAuthorizationReply% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         vehicle_type = to_copy.vehicle_type;
         authorized_services = to_copy.authorized_services;
         granted_services = to_copy.granted_services;
      }
      VehicleAuthorizationReply(const vehicle_authorization_reply_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         vehicle_type = to_copy.vehicle_type;
         authorized_services = to_copy.authorized_services;
         granted_services = to_copy.granted_services;
      }
   };

   /** Redefine c++ Vehicle_Mode_Command struct as c# struct which is auto generated*/ 
   public ref struct VehicleModeCommand
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      uint8_t vehicle_mode;
      VehicleModeCommand(){}
      VehicleModeCommand(const VehicleModeCommand% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         vehicle_mode = to_copy.vehicle_mode;
      }
      VehicleModeCommand(const vehicle_mode_command_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         vehicle_mode = to_copy.vehicle_mode;
      }
   };

   /** Redefine c++ Vehicle_Termination_Command struct as c# struct which is auto generated*/ 
   public ref struct VehicleTerminationCommand
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      uint8_t termination_mode;
      VehicleTerminationCommand(){}
      VehicleTerminationCommand(const VehicleTerminationCommand% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         termination_mode = to_copy.termination_mode;
      }
      VehicleTerminationCommand(const vehicle_termination_command_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         termination_mode = to_copy.termination_mode;
      }
   };

   /** Redefine c++ Vehicle_Telemetry_Command struct as c# struct which is auto generated*/ 
   public ref struct VehicleTelemetryCommand
   {
      float64_t timestamp;
      uint8_t telemetry_select;
      uint8_t telemetry_rate;
      VehicleTelemetryCommand(){}
      VehicleTelemetryCommand(const VehicleTelemetryCommand% to_copy)
      {
         timestamp = to_copy.timestamp;
         telemetry_select = to_copy.telemetry_select;
         telemetry_rate = to_copy.telemetry_rate;
      }
      VehicleTelemetryCommand(const vehicle_telemetry_command_t to_copy)
      {
         timestamp = to_copy.timestamp;
         telemetry_select = to_copy.telemetry_select;
         telemetry_rate = to_copy.telemetry_rate;
      }
   };

   /** Redefine c++ Vehicle_Waypoint_Command struct as c# struct which is auto generated*/ 
   public ref struct VehicleWaypointCommand
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      int32_t latitude;
      int32_t longitude;
      int32_t altitude;
      int32_t heading;
      uint8_t waypoint_ID;
      uint8_t waypoint_type;
      VehicleWaypointCommand(){}
      VehicleWaypointCommand(const VehicleWaypointCommand% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         latitude = to_copy.latitude;
         longitude = to_copy.longitude;
         altitude = to_copy.altitude;
         heading = to_copy.heading;
         waypoint_ID = to_copy.waypoint_ID;
         waypoint_type = to_copy.waypoint_type;
      }
      VehicleWaypointCommand(const vehicle_waypoint_command_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         latitude = to_copy.latitude;
         longitude = to_copy.longitude;
         altitude = to_copy.altitude;
         heading = to_copy.heading;
         waypoint_ID = to_copy.waypoint_ID;
         waypoint_type = to_copy.waypoint_type;
      }
   };

   /** Redefine c++ Vehicle_System_Status struct as c# struct which is auto generated*/ 
   public ref struct VehicleSystemStatus
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      uint8_t vehicle_mode;
      uint8_t vehicle_state;
      VehicleSystemStatus(){}
      VehicleSystemStatus(const VehicleSystemStatus% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         vehicle_mode = to_copy.vehicle_mode;
         vehicle_state = to_copy.vehicle_state;
      }
      VehicleSystemStatus(const vehicle_system_status_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         vehicle_mode = to_copy.vehicle_mode;
         vehicle_state = to_copy.vehicle_state;
      }
   };

   /** Redefine c++ Vehicle_Inertial_State struct as c# struct which is auto generated*/ 
   public ref struct VehicleInertialState
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      float64_t latitude;
      float64_t longitude;
      float32_t altitude;
      float32_t roll;
      float32_t pitch;
      float32_t heading;
      float32_t north_speed;
      float32_t east_speed;
      float32_t vertical_speed;
      float32_t roll_rate;
      float32_t pitch_rate;
      float32_t yaw_rate;
      float32_t north_accel;
      float32_t east_accel;
      float32_t vertical_accel;
      VehicleInertialState(){}
      VehicleInertialState(const VehicleInertialState% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         latitude = to_copy.latitude;
         longitude = to_copy.longitude;
         altitude = to_copy.altitude;
         roll = to_copy.roll;
         pitch = to_copy.pitch;
         heading = to_copy.heading;
         north_speed = to_copy.north_speed;
         east_speed = to_copy.east_speed;
         vertical_speed = to_copy.vertical_speed;
         roll_rate = to_copy.roll_rate;
         pitch_rate = to_copy.pitch_rate;
         yaw_rate = to_copy.yaw_rate;
         north_accel = to_copy.north_accel;
         east_accel = to_copy.east_accel;
         vertical_accel = to_copy.vertical_accel;
      }
      VehicleInertialState(const vehicle_inertial_state_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         latitude = to_copy.latitude;
         longitude = to_copy.longitude;
         altitude = to_copy.altitude;
         roll = to_copy.roll;
         pitch = to_copy.pitch;
         heading = to_copy.heading;
         north_speed = to_copy.north_speed;
         east_speed = to_copy.east_speed;
         vertical_speed = to_copy.vertical_speed;
         roll_rate = to_copy.roll_rate;
         pitch_rate = to_copy.pitch_rate;
         yaw_rate = to_copy.yaw_rate;
         north_accel = to_copy.north_accel;
         east_accel = to_copy.east_accel;
         vertical_accel = to_copy.vertical_accel;
      }
   };

   /** Redefine c++ Vehicle_Global_Position struct as c# struct which is auto generated*/ 
   public ref struct VehicleGlobalPosition
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      int32_t latitude;
      int32_t longitude;
      int32_t altitude;
      int32_t heading;
      int16_t x_speed;
      int16_t y_speed;
      int16_t z_speed;
      VehicleGlobalPosition(){}
      VehicleGlobalPosition(const VehicleGlobalPosition% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         latitude = to_copy.latitude;
         longitude = to_copy.longitude;
         altitude = to_copy.altitude;
         heading = to_copy.heading;
         x_speed = to_copy.x_speed;
         y_speed = to_copy.y_speed;
         z_speed = to_copy.z_speed;
      }
      VehicleGlobalPosition(const vehicle_global_position_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         latitude = to_copy.latitude;
         longitude = to_copy.longitude;
         altitude = to_copy.altitude;
         heading = to_copy.heading;
         x_speed = to_copy.x_speed;
         y_speed = to_copy.y_speed;
         z_speed = to_copy.z_speed;
      }
   };

   /** Redefine c++ Vehicle_Body_Sensed_State struct as c# struct which is auto generated*/ 
   public ref struct VehicleBodySensedState
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      int16_t x_accel;
      int16_t y_accel;
      int16_t z_accel;
      int16_t roll_rate;
      int16_t pitch_rate;
      int16_t yaw_rate;
      VehicleBodySensedState(){}
      VehicleBodySensedState(const VehicleBodySensedState% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         x_accel = to_copy.x_accel;
         y_accel = to_copy.y_accel;
         z_accel = to_copy.z_accel;
         roll_rate = to_copy.roll_rate;
         pitch_rate = to_copy.pitch_rate;
         yaw_rate = to_copy.yaw_rate;
      }
      VehicleBodySensedState(const vehicle_body_sensed_state_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         x_accel = to_copy.x_accel;
         y_accel = to_copy.y_accel;
         z_accel = to_copy.z_accel;
         roll_rate = to_copy.roll_rate;
         pitch_rate = to_copy.pitch_rate;
         yaw_rate = to_copy.yaw_rate;
      }
   };

   /** Redefine c++ Vehicle_Attitude struct as c# struct which is auto generated*/ 
   public ref struct VehicleAttitude
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      float32_t roll;
      float32_t pitch;
      float32_t yaw;
      VehicleAttitude(){}
      VehicleAttitude(const VehicleAttitude% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         roll = to_copy.roll;
         pitch = to_copy.pitch;
         yaw = to_copy.yaw;
      }
      VehicleAttitude(const vehicle_attitude_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         roll = to_copy.roll;
         pitch = to_copy.pitch;
         yaw = to_copy.yaw;
      }
   };

   /** Redefine c++ Vehicle_Ground_Relative_State struct as c# struct which is auto generated*/ 
   public ref struct VehicleGroundRelativeState
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      float32_t angle_of_attack;
      float32_t angle_of_sideslip;
      float32_t true_airspeed;
      float32_t indicated_airspeed;
      float32_t north_wind_speed;
      float32_t east_wind_speed;
      float32_t north_ground_speed;
      float32_t east_ground_speed;
      float32_t barometric_pressure;
      float32_t barometric_altitude;
      VehicleGroundRelativeState(){}
      VehicleGroundRelativeState(const VehicleGroundRelativeState% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         angle_of_attack = to_copy.angle_of_attack;
         angle_of_sideslip = to_copy.angle_of_sideslip;
         true_airspeed = to_copy.true_airspeed;
         indicated_airspeed = to_copy.indicated_airspeed;
         north_wind_speed = to_copy.north_wind_speed;
         east_wind_speed = to_copy.east_wind_speed;
         north_ground_speed = to_copy.north_ground_speed;
         east_ground_speed = to_copy.east_ground_speed;
         barometric_pressure = to_copy.barometric_pressure;
         barometric_altitude = to_copy.barometric_altitude;
      }
      VehicleGroundRelativeState(const vehicle_ground_relative_state_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         angle_of_attack = to_copy.angle_of_attack;
         angle_of_sideslip = to_copy.angle_of_sideslip;
         true_airspeed = to_copy.true_airspeed;
         indicated_airspeed = to_copy.indicated_airspeed;
         north_wind_speed = to_copy.north_wind_speed;
         east_wind_speed = to_copy.east_wind_speed;
         north_ground_speed = to_copy.north_ground_speed;
         east_ground_speed = to_copy.east_ground_speed;
         barometric_pressure = to_copy.barometric_pressure;
         barometric_altitude = to_copy.barometric_altitude;
      }
   };

   /** Redefine c++ Payload_Bay_Command struct as c# struct which is auto generated*/ 
   public ref struct PayloadBayCommand
   {
      float64_t timestamp;
      uint32_t payload_ID;
      uint8_t payload_command;
      PayloadBayCommand(){}
      PayloadBayCommand(const PayloadBayCommand% to_copy)
      {
         timestamp = to_copy.timestamp;
         payload_ID = to_copy.payload_ID;
         payload_command = to_copy.payload_command;
      }
      PayloadBayCommand(const payload_bay_command_t to_copy)
      {
         timestamp = to_copy.timestamp;
         payload_ID = to_copy.payload_ID;
         payload_command = to_copy.payload_command;
      }
   };

   /** Redefine c++ Payload_Bay_Mode_Command struct as c# struct which is auto generated*/ 
   public ref struct PayloadBayModeCommand
   {
      float64_t timestamp;
      uint32_t payload_ID;
      uint8_t payload_mode;
      PayloadBayModeCommand(){}
      PayloadBayModeCommand(const PayloadBayModeCommand% to_copy)
      {
         timestamp = to_copy.timestamp;
         payload_ID = to_copy.payload_ID;
         payload_mode = to_copy.payload_mode;
      }
      PayloadBayModeCommand(const payload_bay_mode_command_t to_copy)
      {
         timestamp = to_copy.timestamp;
         payload_ID = to_copy.payload_ID;
         payload_mode = to_copy.payload_mode;
      }
   };

   /** Redefine c++ Target_Designation_Command struct as c# struct which is auto generated*/ 
   public ref struct TargetDesignationCommand
   {
      float64_t timestamp;
      uint16_t vehicle_ID;
      uint8_t payload_ID;
      uint8_t target_ID;
      uint8_t target_type;
      int32_t latitude;
      int32_t longitude;
      int32_t altitude;
      TargetDesignationCommand(){}
      TargetDesignationCommand(const TargetDesignationCommand% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         payload_ID = to_copy.payload_ID;
         target_ID = to_copy.target_ID;
         target_type = to_copy.target_type;
         latitude = to_copy.latitude;
         longitude = to_copy.longitude;
         altitude = to_copy.altitude;
      }
      TargetDesignationCommand(const target_designation_command_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_ID = to_copy.vehicle_ID;
         payload_ID = to_copy.payload_ID;
         target_ID = to_copy.target_ID;
         target_type = to_copy.target_type;
         latitude = to_copy.latitude;
         longitude = to_copy.longitude;
         altitude = to_copy.altitude;
      }
   };

   /** Redefine c++ UGV_Joystick struct as c# struct which is auto generated*/ 
   public ref struct UGVJoystick
   {
      float64_t timestamp;
      uint8_t vehicle_id;
      float32_t steering;
      float32_t throttle;
      UGVJoystick(){}
      UGVJoystick(const UGVJoystick% to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_id = to_copy.vehicle_id;
         steering = to_copy.steering;
         throttle = to_copy.throttle;
      }
      UGVJoystick(const UGV_joystick_t to_copy)
      {
         timestamp = to_copy.timestamp;
         vehicle_id = to_copy.vehicle_id;
         steering = to_copy.steering;
         throttle = to_copy.throttle;
      }
   };

   /** Redefine c++ UGV_Battery_Status struct as c# struct which is auto generated*/ 
   public ref struct UGVBatteryStatus
   {
      float64_t timestamp;
      float32_t voltage_3_3V;
      float32_t voltage_5V;
      float32_t voltage_12V;
      float32_t current_3_3V;
      float32_t current_5V;
      float32_t current_12V;
      float32_t current_fore_motor;
      float32_t current_aft_motor;
      UGVBatteryStatus(){}
      UGVBatteryStatus(const UGVBatteryStatus% to_copy)
      {
         timestamp = to_copy.timestamp;
         voltage_3_3V = to_copy.voltage_3_3V;
         voltage_5V = to_copy.voltage_5V;
         voltage_12V = to_copy.voltage_12V;
         current_3_3V = to_copy.current_3_3V;
         current_5V = to_copy.current_5V;
         current_12V = to_copy.current_12V;
         current_fore_motor = to_copy.current_fore_motor;
         current_aft_motor = to_copy.current_aft_motor;
      }
      UGVBatteryStatus(const UGV_battery_status_t to_copy)
      {
         timestamp = to_copy.timestamp;
         voltage_3_3V = to_copy.voltage_3_3V;
         voltage_5V = to_copy.voltage_5V;
         voltage_12V = to_copy.voltage_12V;
         current_3_3V = to_copy.current_3_3V;
         current_5V = to_copy.current_5V;
         current_12V = to_copy.current_12V;
         current_fore_motor = to_copy.current_fore_motor;
         current_aft_motor = to_copy.current_aft_motor;
      }
   };

   /* Note [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)] is used to set c# pointer type to Cdecl
   which is the default c++ pointer type. If you get stack pointer error then the pointer type does not match c++ pointer type.*/ 

   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* EnterCallback(int8_t, proto_header_t, enter_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* ExitCallback(int8_t, proto_header_t, exit_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* PingCallback(int8_t, proto_header_t, ping_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* PongCallback(int8_t, proto_header_t, pong_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleIdentificationCallback(int8_t, proto_header_t, vehicle_identification_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* AmyStuffCallback(int8_t, proto_header_t, amy_stuff_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleAuthorizationRequestCallback(int8_t, proto_header_t, vehicle_authorization_request_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleAuthorizationReplyCallback(int8_t, proto_header_t, vehicle_authorization_reply_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleModeCommandCallback(int8_t, proto_header_t, vehicle_mode_command_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleTerminationCommandCallback(int8_t, proto_header_t, vehicle_termination_command_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleTelemetryCommandCallback(int8_t, proto_header_t, vehicle_telemetry_command_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleWaypointCommandCallback(int8_t, proto_header_t, vehicle_waypoint_command_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleSystemStatusCallback(int8_t, proto_header_t, vehicle_system_status_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleInertialStateCallback(int8_t, proto_header_t, vehicle_inertial_state_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleGlobalPositionCallback(int8_t, proto_header_t, vehicle_global_position_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleBodySensedStateCallback(int8_t, proto_header_t, vehicle_body_sensed_state_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleAttitudeCallback(int8_t, proto_header_t, vehicle_attitude_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* VehicleGroundRelativeStateCallback(int8_t, proto_header_t, vehicle_ground_relative_state_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* PayloadBayCommandCallback(int8_t, proto_header_t, payload_bay_command_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* PayloadBayModeCommandCallback(int8_t, proto_header_t, payload_bay_mode_command_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* TargetDesignationCommandCallback(int8_t, proto_header_t, target_designation_command_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* UGVJoystickCallback(int8_t, proto_header_t, UGV_joystick_t, protonet::node*);
   [UnmanagedFunctionPointerAttribute(CallingConvention::Cdecl)]   /** Redefine c++ callback pointer as managed c++/cli pointer for c#.*/
   public delegate void* UGVBatteryStatusCallback(int8_t, proto_header_t, UGV_battery_status_t, protonet::node*);

   /** Redefine c++ node class as c++/cli managed class for c#. Just look up c++ class for documentation.*/
   public ref class Node
   {
   public:
      Node(uint8_t node_id);
      ~Node();
      void Start();
      void AddUDPDatalink([System::Runtime::InteropServices::Out]int8_t% link_id,uint16_t port);
      void AddUDPDatalink([System::Runtime::InteropServices::Out]int8_t% link_id,uint16_t port, String^ addr);
      void EstablishUDPEndpoint(int8_t link_id, uint8_t node_id, uint16_t port, String^ addr);
      void AddSerialDatalink([System::Runtime::InteropServices::Out]int8_t% link_id, uint32_t baud_rate, String^ device_path);
      void EstablishSerialEndpoint(int8_t link_id, uint8_t node_id);

   void SendEnter(
      uint8_t dest_id,
      float64_t timestamp);

   void SendExit(
      uint8_t dest_id,
      float64_t timestamp);

   void SendPing(
      uint8_t dest_id,
      float64_t timestamp);

   void SendPong(
      uint8_t dest_id,
      float64_t timestamp);

   void SendVehicleIdentification(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      uint8_t vehicle_type,
      uint16_t owner_ID);

   void SendAmyStuff(
      uint8_t dest_id,
      float64_t hello);

   void SendVehicleAuthorizationRequest(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      uint8_t link_key,
      uint8_t requested_services,
      uint8_t handover_node);

   void SendVehicleAuthorizationReply(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      uint8_t vehicle_type,
      uint8_t authorized_services,
      uint8_t granted_services);

   void SendVehicleModeCommand(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      uint8_t vehicle_mode);

   void SendVehicleTerminationCommand(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      uint8_t termination_mode);

   void SendVehicleTelemetryCommand(
      uint8_t dest_id,
      float64_t timestamp,
      uint8_t telemetry_select,
      uint8_t telemetry_rate);

   void SendVehicleWaypointCommand(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      int32_t latitude,
      int32_t longitude,
      int32_t altitude,
      int32_t heading,
      uint8_t waypoint_ID,
      uint8_t waypoint_type);

   void SendVehicleSystemStatus(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      uint8_t vehicle_mode,
      uint8_t vehicle_state);

   void SendVehicleInertialState(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      float64_t latitude,
      float64_t longitude,
      float32_t altitude,
      float32_t roll,
      float32_t pitch,
      float32_t heading,
      float32_t north_speed,
      float32_t east_speed,
      float32_t vertical_speed,
      float32_t roll_rate,
      float32_t pitch_rate,
      float32_t yaw_rate,
      float32_t north_accel,
      float32_t east_accel,
      float32_t vertical_accel);

   void SendVehicleGlobalPosition(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      int32_t latitude,
      int32_t longitude,
      int32_t altitude,
      int32_t heading,
      int16_t x_speed,
      int16_t y_speed,
      int16_t z_speed);

   void SendVehicleBodySensedState(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      int16_t x_accel,
      int16_t y_accel,
      int16_t z_accel,
      int16_t roll_rate,
      int16_t pitch_rate,
      int16_t yaw_rate);

   void SendVehicleAttitude(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      float32_t roll,
      float32_t pitch,
      float32_t yaw);

   void SendVehicleGroundRelativeState(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      float32_t angle_of_attack,
      float32_t angle_of_sideslip,
      float32_t true_airspeed,
      float32_t indicated_airspeed,
      float32_t north_wind_speed,
      float32_t east_wind_speed,
      float32_t north_ground_speed,
      float32_t east_ground_speed,
      float32_t barometric_pressure,
      float32_t barometric_altitude);

   void SendPayloadBayCommand(
      uint8_t dest_id,
      float64_t timestamp,
      uint32_t payload_ID,
      uint8_t payload_command);

   void SendPayloadBayModeCommand(
      uint8_t dest_id,
      float64_t timestamp,
      uint32_t payload_ID,
      uint8_t payload_mode);

   void SendTargetDesignationCommand(
      uint8_t dest_id,
      float64_t timestamp,
      uint16_t vehicle_ID,
      uint8_t payload_ID,
      uint8_t target_ID,
      uint8_t target_type,
      int32_t latitude,
      int32_t longitude,
      int32_t altitude);

   void SendUGVJoystick(
      uint8_t dest_id,
      float64_t timestamp,
      uint8_t vehicle_id,
      float32_t steering,
      float32_t throttle);

   void SendUGVBatteryStatus(
      uint8_t dest_id,
      float64_t timestamp,
      float32_t voltage_3_3V,
      float32_t voltage_5V,
      float32_t voltage_12V,
      float32_t current_3_3V,
      float32_t current_5V,
      float32_t current_12V,
      float32_t current_fore_motor,
      float32_t current_aft_motor);

   delegate void EnterDelegate(int8_t, Header^%, Enter^%, Protonet::Node^);
   delegate void ExitDelegate(int8_t, Header^%, Exit^%, Protonet::Node^);
   delegate void PingDelegate(int8_t, Header^%, Ping^%, Protonet::Node^);
   delegate void PongDelegate(int8_t, Header^%, Pong^%, Protonet::Node^);
   delegate void VehicleIdentificationDelegate(int8_t, Header^%, VehicleIdentification^%, Protonet::Node^);
   delegate void AmyStuffDelegate(int8_t, Header^%, AmyStuff^%, Protonet::Node^);
   delegate void VehicleAuthorizationRequestDelegate(int8_t, Header^%, VehicleAuthorizationRequest^%, Protonet::Node^);
   delegate void VehicleAuthorizationReplyDelegate(int8_t, Header^%, VehicleAuthorizationReply^%, Protonet::Node^);
   delegate void VehicleModeCommandDelegate(int8_t, Header^%, VehicleModeCommand^%, Protonet::Node^);
   delegate void VehicleTerminationCommandDelegate(int8_t, Header^%, VehicleTerminationCommand^%, Protonet::Node^);
   delegate void VehicleTelemetryCommandDelegate(int8_t, Header^%, VehicleTelemetryCommand^%, Protonet::Node^);
   delegate void VehicleWaypointCommandDelegate(int8_t, Header^%, VehicleWaypointCommand^%, Protonet::Node^);
   delegate void VehicleSystemStatusDelegate(int8_t, Header^%, VehicleSystemStatus^%, Protonet::Node^);
   delegate void VehicleInertialStateDelegate(int8_t, Header^%, VehicleInertialState^%, Protonet::Node^);
   delegate void VehicleGlobalPositionDelegate(int8_t, Header^%, VehicleGlobalPosition^%, Protonet::Node^);
   delegate void VehicleBodySensedStateDelegate(int8_t, Header^%, VehicleBodySensedState^%, Protonet::Node^);
   delegate void VehicleAttitudeDelegate(int8_t, Header^%, VehicleAttitude^%, Protonet::Node^);
   delegate void VehicleGroundRelativeStateDelegate(int8_t, Header^%, VehicleGroundRelativeState^%, Protonet::Node^);
   delegate void PayloadBayCommandDelegate(int8_t, Header^%, PayloadBayCommand^%, Protonet::Node^);
   delegate void PayloadBayModeCommandDelegate(int8_t, Header^%, PayloadBayModeCommand^%, Protonet::Node^);
   delegate void TargetDesignationCommandDelegate(int8_t, Header^%, TargetDesignationCommand^%, Protonet::Node^);
   delegate void UGVJoystickDelegate(int8_t, Header^%, UGVJoystick^%, Protonet::Node^);
   delegate void UGVBatteryStatusDelegate(int8_t, Header^%, UGVBatteryStatus^%, Protonet::Node^);

   void RegisterEnterEvent(EnterDelegate^ EnterEvent);
   void RegisterExitEvent(ExitDelegate^ ExitEvent);
   void RegisterPingEvent(PingDelegate^ PingEvent);
   void RegisterPongEvent(PongDelegate^ PongEvent);
   void RegisterVehicleIdentificationEvent(VehicleIdentificationDelegate^ VehicleIdentificationEvent);
   void RegisterAmyStuffEvent(AmyStuffDelegate^ AmyStuffEvent);
   void RegisterVehicleAuthorizationRequestEvent(VehicleAuthorizationRequestDelegate^ VehicleAuthorizationRequestEvent);
   void RegisterVehicleAuthorizationReplyEvent(VehicleAuthorizationReplyDelegate^ VehicleAuthorizationReplyEvent);
   void RegisterVehicleModeCommandEvent(VehicleModeCommandDelegate^ VehicleModeCommandEvent);
   void RegisterVehicleTerminationCommandEvent(VehicleTerminationCommandDelegate^ VehicleTerminationCommandEvent);
   void RegisterVehicleTelemetryCommandEvent(VehicleTelemetryCommandDelegate^ VehicleTelemetryCommandEvent);
   void RegisterVehicleWaypointCommandEvent(VehicleWaypointCommandDelegate^ VehicleWaypointCommandEvent);
   void RegisterVehicleSystemStatusEvent(VehicleSystemStatusDelegate^ VehicleSystemStatusEvent);
   void RegisterVehicleInertialStateEvent(VehicleInertialStateDelegate^ VehicleInertialStateEvent);
   void RegisterVehicleGlobalPositionEvent(VehicleGlobalPositionDelegate^ VehicleGlobalPositionEvent);
   void RegisterVehicleBodySensedStateEvent(VehicleBodySensedStateDelegate^ VehicleBodySensedStateEvent);
   void RegisterVehicleAttitudeEvent(VehicleAttitudeDelegate^ VehicleAttitudeEvent);
   void RegisterVehicleGroundRelativeStateEvent(VehicleGroundRelativeStateDelegate^ VehicleGroundRelativeStateEvent);
   void RegisterPayloadBayCommandEvent(PayloadBayCommandDelegate^ PayloadBayCommandEvent);
   void RegisterPayloadBayModeCommandEvent(PayloadBayModeCommandDelegate^ PayloadBayModeCommandEvent);
   void RegisterTargetDesignationCommandEvent(TargetDesignationCommandDelegate^ TargetDesignationCommandEvent);
   void RegisterUGVJoystickEvent(UGVJoystickDelegate^ UGVJoystickEvent);
   void RegisterUGVBatteryStatusEvent(UGVBatteryStatusDelegate^ UGVBatteryStatusEvent);

   private:
      protonet::node* node;

      IntPtr OnEnterPtr;
      EnterCallback^ OnEnterCallback;
      EnterDelegate^ OnEnterDelegate;

      IntPtr OnExitPtr;
      ExitCallback^ OnExitCallback;
      ExitDelegate^ OnExitDelegate;

      IntPtr OnPingPtr;
      PingCallback^ OnPingCallback;
      PingDelegate^ OnPingDelegate;

      IntPtr OnPongPtr;
      PongCallback^ OnPongCallback;
      PongDelegate^ OnPongDelegate;

      IntPtr OnVehicleIdentificationPtr;
      VehicleIdentificationCallback^ OnVehicleIdentificationCallback;
      VehicleIdentificationDelegate^ OnVehicleIdentificationDelegate;

      IntPtr OnAmyStuffPtr;
      AmyStuffCallback^ OnAmyStuffCallback;
      AmyStuffDelegate^ OnAmyStuffDelegate;

      IntPtr OnVehicleAuthorizationRequestPtr;
      VehicleAuthorizationRequestCallback^ OnVehicleAuthorizationRequestCallback;
      VehicleAuthorizationRequestDelegate^ OnVehicleAuthorizationRequestDelegate;

      IntPtr OnVehicleAuthorizationReplyPtr;
      VehicleAuthorizationReplyCallback^ OnVehicleAuthorizationReplyCallback;
      VehicleAuthorizationReplyDelegate^ OnVehicleAuthorizationReplyDelegate;

      IntPtr OnVehicleModeCommandPtr;
      VehicleModeCommandCallback^ OnVehicleModeCommandCallback;
      VehicleModeCommandDelegate^ OnVehicleModeCommandDelegate;

      IntPtr OnVehicleTerminationCommandPtr;
      VehicleTerminationCommandCallback^ OnVehicleTerminationCommandCallback;
      VehicleTerminationCommandDelegate^ OnVehicleTerminationCommandDelegate;

      IntPtr OnVehicleTelemetryCommandPtr;
      VehicleTelemetryCommandCallback^ OnVehicleTelemetryCommandCallback;
      VehicleTelemetryCommandDelegate^ OnVehicleTelemetryCommandDelegate;

      IntPtr OnVehicleWaypointCommandPtr;
      VehicleWaypointCommandCallback^ OnVehicleWaypointCommandCallback;
      VehicleWaypointCommandDelegate^ OnVehicleWaypointCommandDelegate;

      IntPtr OnVehicleSystemStatusPtr;
      VehicleSystemStatusCallback^ OnVehicleSystemStatusCallback;
      VehicleSystemStatusDelegate^ OnVehicleSystemStatusDelegate;

      IntPtr OnVehicleInertialStatePtr;
      VehicleInertialStateCallback^ OnVehicleInertialStateCallback;
      VehicleInertialStateDelegate^ OnVehicleInertialStateDelegate;

      IntPtr OnVehicleGlobalPositionPtr;
      VehicleGlobalPositionCallback^ OnVehicleGlobalPositionCallback;
      VehicleGlobalPositionDelegate^ OnVehicleGlobalPositionDelegate;

      IntPtr OnVehicleBodySensedStatePtr;
      VehicleBodySensedStateCallback^ OnVehicleBodySensedStateCallback;
      VehicleBodySensedStateDelegate^ OnVehicleBodySensedStateDelegate;

      IntPtr OnVehicleAttitudePtr;
      VehicleAttitudeCallback^ OnVehicleAttitudeCallback;
      VehicleAttitudeDelegate^ OnVehicleAttitudeDelegate;

      IntPtr OnVehicleGroundRelativeStatePtr;
      VehicleGroundRelativeStateCallback^ OnVehicleGroundRelativeStateCallback;
      VehicleGroundRelativeStateDelegate^ OnVehicleGroundRelativeStateDelegate;

      IntPtr OnPayloadBayCommandPtr;
      PayloadBayCommandCallback^ OnPayloadBayCommandCallback;
      PayloadBayCommandDelegate^ OnPayloadBayCommandDelegate;

      IntPtr OnPayloadBayModeCommandPtr;
      PayloadBayModeCommandCallback^ OnPayloadBayModeCommandCallback;
      PayloadBayModeCommandDelegate^ OnPayloadBayModeCommandDelegate;

      IntPtr OnTargetDesignationCommandPtr;
      TargetDesignationCommandCallback^ OnTargetDesignationCommandCallback;
      TargetDesignationCommandDelegate^ OnTargetDesignationCommandDelegate;

      IntPtr OnUGVJoystickPtr;
      UGVJoystickCallback^ OnUGVJoystickCallback;
      UGVJoystickDelegate^ OnUGVJoystickDelegate;

      IntPtr OnUGVBatteryStatusPtr;
      UGVBatteryStatusCallback^ OnUGVBatteryStatusCallback;
      UGVBatteryStatusDelegate^ OnUGVBatteryStatusDelegate;

      void* EnterHelper(int8_t link_id, proto_header_t header, enter_t enter, protonet::node* ptr);
      void* ExitHelper(int8_t link_id, proto_header_t header, exit_t exit, protonet::node* ptr);
      void* PingHelper(int8_t link_id, proto_header_t header, ping_t ping, protonet::node* ptr);
      void* PongHelper(int8_t link_id, proto_header_t header, pong_t pong, protonet::node* ptr);
      void* VehicleIdentificationHelper(int8_t link_id, proto_header_t header, vehicle_identification_t vehicle_identification, protonet::node* ptr);
      void* AmyStuffHelper(int8_t link_id, proto_header_t header, amy_stuff_t amy_stuff, protonet::node* ptr);
      void* VehicleAuthorizationRequestHelper(int8_t link_id, proto_header_t header, vehicle_authorization_request_t vehicle_authorization_request, protonet::node* ptr);
      void* VehicleAuthorizationReplyHelper(int8_t link_id, proto_header_t header, vehicle_authorization_reply_t vehicle_authorization_reply, protonet::node* ptr);
      void* VehicleModeCommandHelper(int8_t link_id, proto_header_t header, vehicle_mode_command_t vehicle_mode_command, protonet::node* ptr);
      void* VehicleTerminationCommandHelper(int8_t link_id, proto_header_t header, vehicle_termination_command_t vehicle_termination_command, protonet::node* ptr);
      void* VehicleTelemetryCommandHelper(int8_t link_id, proto_header_t header, vehicle_telemetry_command_t vehicle_telemetry_command, protonet::node* ptr);
      void* VehicleWaypointCommandHelper(int8_t link_id, proto_header_t header, vehicle_waypoint_command_t vehicle_waypoint_command, protonet::node* ptr);
      void* VehicleSystemStatusHelper(int8_t link_id, proto_header_t header, vehicle_system_status_t vehicle_system_status, protonet::node* ptr);
      void* VehicleInertialStateHelper(int8_t link_id, proto_header_t header, vehicle_inertial_state_t vehicle_inertial_state, protonet::node* ptr);
      void* VehicleGlobalPositionHelper(int8_t link_id, proto_header_t header, vehicle_global_position_t vehicle_global_position, protonet::node* ptr);
      void* VehicleBodySensedStateHelper(int8_t link_id, proto_header_t header, vehicle_body_sensed_state_t vehicle_body_sensed_state, protonet::node* ptr);
      void* VehicleAttitudeHelper(int8_t link_id, proto_header_t header, vehicle_attitude_t vehicle_attitude, protonet::node* ptr);
      void* VehicleGroundRelativeStateHelper(int8_t link_id, proto_header_t header, vehicle_ground_relative_state_t vehicle_ground_relative_state, protonet::node* ptr);
      void* PayloadBayCommandHelper(int8_t link_id, proto_header_t header, payload_bay_command_t payload_bay_command, protonet::node* ptr);
      void* PayloadBayModeCommandHelper(int8_t link_id, proto_header_t header, payload_bay_mode_command_t payload_bay_mode_command, protonet::node* ptr);
      void* TargetDesignationCommandHelper(int8_t link_id, proto_header_t header, target_designation_command_t target_designation_command, protonet::node* ptr);
      void* UGVJoystickHelper(int8_t link_id, proto_header_t header, UGV_joystick_t UGV_joystick, protonet::node* ptr);
      void* UGVBatteryStatusHelper(int8_t link_id, proto_header_t header, UGV_battery_status_t UGV_battery_status, protonet::node* ptr);

   };
}
#endif