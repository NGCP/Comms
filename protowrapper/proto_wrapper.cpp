/* This file was autogenerated. All changes will be undone. */

#include <proto_wrapper.h>
using namespace Protonet;

Node::Node(uint8_t node_id)
{
   node = new protonet::node(node_id);
}

Node::~Node()
{
   delete(node);
}

void Node::Start()
{
   node->start();
}

void Node::SendEnter(
   uint8_t dest_id,
   float64_t timestamp)
{
   node->send_enter(
   dest_id,
   timestamp);
}

void Node::SendExit(
   uint8_t dest_id,
   float64_t timestamp)
{
   node->send_exit(
   dest_id,
   timestamp);
}

void Node::SendPing(
   uint8_t dest_id,
   float64_t timestamp)
{
   node->send_ping(
   dest_id,
   timestamp);
}

void Node::SendPong(
   uint8_t dest_id,
   float64_t timestamp)
{
   node->send_pong(
   dest_id,
   timestamp);
}

void Node::SendVehicleIdentification(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   uint8_t vehicle_type,
   uint16_t owner_ID)
{
   node->send_vehicle_identification(
   dest_id,
   timestamp,
   vehicle_ID,
   vehicle_type,
   owner_ID);
}

void Node::SendAmyStuff(
   uint8_t dest_id,
   float64_t hello)
{
   node->send_amy_stuff(
   dest_id,
   hello);
}

void Node::SendVehicleAuthorizationRequest(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   uint8_t link_key,
   uint8_t requested_services,
   uint8_t handover_node)
{
   node->send_vehicle_authorization_request(
   dest_id,
   timestamp,
   vehicle_ID,
   link_key,
   requested_services,
   handover_node);
}

void Node::SendVehicleAuthorizationReply(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   uint8_t vehicle_type,
   uint8_t authorized_services,
   uint8_t granted_services)
{
   node->send_vehicle_authorization_reply(
   dest_id,
   timestamp,
   vehicle_ID,
   vehicle_type,
   authorized_services,
   granted_services);
}

void Node::SendVehicleModeCommand(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   uint8_t vehicle_mode)
{
   node->send_vehicle_mode_command(
   dest_id,
   timestamp,
   vehicle_ID,
   vehicle_mode);
}

void Node::SendVehicleTerminationCommand(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   uint8_t termination_mode)
{
   node->send_vehicle_termination_command(
   dest_id,
   timestamp,
   vehicle_ID,
   termination_mode);
}

void Node::SendVehicleTelemetryCommand(
   uint8_t dest_id,
   float64_t timestamp,
   uint8_t telemetry_select,
   uint8_t telemetry_rate)
{
   node->send_vehicle_telemetry_command(
   dest_id,
   timestamp,
   telemetry_select,
   telemetry_rate);
}

void Node::SendVehicleWaypointCommand(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   int32_t latitude,
   int32_t longitude,
   int32_t altitude,
   int32_t heading,
   uint8_t waypoint_ID,
   uint8_t waypoint_type)
{
   node->send_vehicle_waypoint_command(
   dest_id,
   timestamp,
   vehicle_ID,
   latitude,
   longitude,
   altitude,
   heading,
   waypoint_ID,
   waypoint_type);
}

void Node::SendVehicleSystemStatus(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   uint8_t vehicle_mode,
   uint8_t vehicle_state)
{
   node->send_vehicle_system_status(
   dest_id,
   timestamp,
   vehicle_ID,
   vehicle_mode,
   vehicle_state);
}

void Node::SendVehicleInertialState(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   float64_t latitude,
   float64_t longitude,
   float32_t altitude,
   float32_t roll,
   float32_t pitch,
   float32_t heading,
   float32_t north_speed,
   float32_t east_speed,
   float32_t vertical_speed,
   float32_t roll_rate,
   float32_t pitch_rate,
   float32_t yaw_rate,
   float32_t north_accel,
   float32_t east_accel,
   float32_t vertical_accel)
{
   node->send_vehicle_inertial_state(
   dest_id,
   timestamp,
   vehicle_ID,
   latitude,
   longitude,
   altitude,
   roll,
   pitch,
   heading,
   north_speed,
   east_speed,
   vertical_speed,
   roll_rate,
   pitch_rate,
   yaw_rate,
   north_accel,
   east_accel,
   vertical_accel);
}

void Node::SendVehicleGlobalPosition(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   int32_t latitude,
   int32_t longitude,
   int32_t altitude,
   int32_t heading,
   int16_t x_speed,
   int16_t y_speed,
   int16_t z_speed)
{
   node->send_vehicle_global_position(
   dest_id,
   timestamp,
   vehicle_ID,
   latitude,
   longitude,
   altitude,
   heading,
   x_speed,
   y_speed,
   z_speed);
}

void Node::SendVehicleBodySensedState(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   int16_t x_accel,
   int16_t y_accel,
   int16_t z_accel,
   int16_t roll_rate,
   int16_t pitch_rate,
   int16_t yaw_rate)
{
   node->send_vehicle_body_sensed_state(
   dest_id,
   timestamp,
   vehicle_ID,
   x_accel,
   y_accel,
   z_accel,
   roll_rate,
   pitch_rate,
   yaw_rate);
}

void Node::SendVehicleAttitude(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   float32_t roll,
   float32_t pitch,
   float32_t yaw)
{
   node->send_vehicle_attitude(
   dest_id,
   timestamp,
   vehicle_ID,
   roll,
   pitch,
   yaw);
}

void Node::SendVehicleGroundRelativeState(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   float32_t angle_of_attack,
   float32_t angle_of_sideslip,
   float32_t true_airspeed,
   float32_t indicated_airspeed,
   float32_t north_wind_speed,
   float32_t east_wind_speed,
   float32_t north_ground_speed,
   float32_t east_ground_speed,
   float32_t barometric_pressure,
   float32_t barometric_altitude)
{
   node->send_vehicle_ground_relative_state(
   dest_id,
   timestamp,
   vehicle_ID,
   angle_of_attack,
   angle_of_sideslip,
   true_airspeed,
   indicated_airspeed,
   north_wind_speed,
   east_wind_speed,
   north_ground_speed,
   east_ground_speed,
   barometric_pressure,
   barometric_altitude);
}

void Node::SendPayloadBayCommand(
   uint8_t dest_id,
   float64_t timestamp,
   uint32_t payload_ID,
   uint8_t payload_command)
{
   node->send_payload_bay_command(
   dest_id,
   timestamp,
   payload_ID,
   payload_command);
}

void Node::SendPayloadBayModeCommand(
   uint8_t dest_id,
   float64_t timestamp,
   uint32_t payload_ID,
   uint8_t payload_mode)
{
   node->send_payload_bay_mode_command(
   dest_id,
   timestamp,
   payload_ID,
   payload_mode);
}

void Node::SendTargetDesignationCommand(
   uint8_t dest_id,
   float64_t timestamp,
   uint16_t vehicle_ID,
   uint8_t payload_ID,
   uint8_t target_ID,
   uint8_t target_type,
   int32_t latitude,
   int32_t longitude,
   int32_t altitude)
{
   node->send_target_designation_command(
   dest_id,
   timestamp,
   vehicle_ID,
   payload_ID,
   target_ID,
   target_type,
   latitude,
   longitude,
   altitude);
}

void Node::SendUGVJoystick(
   uint8_t dest_id,
   float64_t timestamp,
   uint8_t vehicle_id,
   float32_t steering,
   float32_t throttle)
{
   node->send_UGV_joystick(
   dest_id,
   timestamp,
   vehicle_id,
   steering,
   throttle);
}

void Node::SendUGVBatteryStatus(
   uint8_t dest_id,
   float64_t timestamp,
   float32_t voltage_3_3V,
   float32_t voltage_5V,
   float32_t voltage_12V,
   float32_t current_3_3V,
   float32_t current_5V,
   float32_t current_12V,
   float32_t current_fore_motor,
   float32_t current_aft_motor)
{
   node->send_UGV_battery_status(
   dest_id,
   timestamp,
   voltage_3_3V,
   voltage_5V,
   voltage_12V,
   current_3_3V,
   current_5V,
   current_12V,
   current_fore_motor,
   current_aft_motor);
}

void Node::AddUDPDatalink([System::Runtime::InteropServices::Out]int8_t% link_id,uint16_t port)
{
	int8_t link_data;
	node->add_udp(&link_data, port);
	link_id = link_data;
}
void Node::AddUDPDatalink([System::Runtime::InteropServices::Out]int8_t% link_id,uint16_t port, String^ addr)
{
	IntPtr addr_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(addr);
	if(sizeof(addr_ptr)>16)
	{
		return;
	}
	int8_t link_data;
	node->add_udp(&link_data, port, static_cast<char*>(addr_ptr.ToPointer()));
	link_id = link_data;
}

void Node::EstablishUDPEndpoint(int8_t link_id, uint8_t node_id, uint16_t port, String^ addr)
{
	IntPtr addr_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(addr);
	if(sizeof(addr_ptr)>16)
	{
		return;
	}
	node->establish_udp(link_id, node_id, port, static_cast<char*>(addr_ptr.ToPointer()));
}

void Node::AddSerialDatalink([System::Runtime::InteropServices::Out]int8_t% link_id, uint32_t baud_rate, String^ device_path)
{
	IntPtr device_path_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(device_path);
	if(sizeof(device_path_ptr)>16)
	{
		return;
	}
	int8_t link_data;
	node->add_serial(&link_data, baud_rate, static_cast<char*>(device_path_ptr.ToPointer()));
	link_id = link_data;
}

void Node::EstablishSerialEndpoint(int8_t link_id, uint8_t node_id)
{
	node->establish_serial(link_id,node_id);
}

void* Node::EnterHelper(int8_t link_id, proto_header_t header, enter_t enter, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   Enter^ managed_enter = gcnew Enter(enter);
   OnEnterDelegate(link_id, managed_header, managed_enter, this);
   return 0;
}

void Node::RegisterEnterEvent(EnterDelegate^ EnterEvent)
{
   OnEnterDelegate = EnterEvent;
   OnEnterCallback = gcnew EnterCallback(this, &Node::EnterHelper);
   OnEnterPtr = Marshal::GetFunctionPointerForDelegate(OnEnterCallback);
   node->register_on_enter(static_cast<protonet::enter_callback>(OnEnterPtr.ToPointer()));
}

void* Node::ExitHelper(int8_t link_id, proto_header_t header, exit_t exit, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   Exit^ managed_exit = gcnew Exit(exit);
   OnExitDelegate(link_id, managed_header, managed_exit, this);
   return 0;
}

void Node::RegisterExitEvent(ExitDelegate^ ExitEvent)
{
   OnExitDelegate = ExitEvent;
   OnExitCallback = gcnew ExitCallback(this, &Node::ExitHelper);
   OnExitPtr = Marshal::GetFunctionPointerForDelegate(OnExitCallback);
   node->register_on_exit(static_cast<protonet::exit_callback>(OnExitPtr.ToPointer()));
}

void* Node::PingHelper(int8_t link_id, proto_header_t header, ping_t ping, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   Ping^ managed_ping = gcnew Ping(ping);
   OnPingDelegate(link_id, managed_header, managed_ping, this);
   return 0;
}

void Node::RegisterPingEvent(PingDelegate^ PingEvent)
{
   OnPingDelegate = PingEvent;
   OnPingCallback = gcnew PingCallback(this, &Node::PingHelper);
   OnPingPtr = Marshal::GetFunctionPointerForDelegate(OnPingCallback);
   node->register_on_ping(static_cast<protonet::ping_callback>(OnPingPtr.ToPointer()));
}

void* Node::PongHelper(int8_t link_id, proto_header_t header, pong_t pong, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   Pong^ managed_pong = gcnew Pong(pong);
   OnPongDelegate(link_id, managed_header, managed_pong, this);
   return 0;
}

void Node::RegisterPongEvent(PongDelegate^ PongEvent)
{
   OnPongDelegate = PongEvent;
   OnPongCallback = gcnew PongCallback(this, &Node::PongHelper);
   OnPongPtr = Marshal::GetFunctionPointerForDelegate(OnPongCallback);
   node->register_on_pong(static_cast<protonet::pong_callback>(OnPongPtr.ToPointer()));
}

void* Node::VehicleIdentificationHelper(int8_t link_id, proto_header_t header, vehicle_identification_t vehicle_identification, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleIdentification^ managed_vehicle_identification = gcnew VehicleIdentification(vehicle_identification);
   OnVehicleIdentificationDelegate(link_id, managed_header, managed_vehicle_identification, this);
   return 0;
}

void Node::RegisterVehicleIdentificationEvent(VehicleIdentificationDelegate^ VehicleIdentificationEvent)
{
   OnVehicleIdentificationDelegate = VehicleIdentificationEvent;
   OnVehicleIdentificationCallback = gcnew VehicleIdentificationCallback(this, &Node::VehicleIdentificationHelper);
   OnVehicleIdentificationPtr = Marshal::GetFunctionPointerForDelegate(OnVehicleIdentificationCallback);
   node->register_on_vehicle_identification(static_cast<protonet::vehicle_identification_callback>(OnVehicleIdentificationPtr.ToPointer()));
}

void* Node::AmyStuffHelper(int8_t link_id, proto_header_t header, amy_stuff_t amy_stuff, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   AmyStuff^ managed_amy_stuff = gcnew AmyStuff(amy_stuff);
   OnAmyStuffDelegate(link_id, managed_header, managed_amy_stuff, this);
   return 0;
}

void Node::RegisterAmyStuffEvent(AmyStuffDelegate^ AmyStuffEvent)
{
   OnAmyStuffDelegate = AmyStuffEvent;
   OnAmyStuffCallback = gcnew AmyStuffCallback(this, &Node::AmyStuffHelper);
   OnAmyStuffPtr = Marshal::GetFunctionPointerForDelegate(OnAmyStuffCallback);
   node->register_on_amy_stuff(static_cast<protonet::amy_stuff_callback>(OnAmyStuffPtr.ToPointer()));
}

void* Node::VehicleAuthorizationRequestHelper(int8_t link_id, proto_header_t header, vehicle_authorization_request_t vehicle_authorization_request, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleAuthorizationRequest^ managed_vehicle_authorization_request = gcnew VehicleAuthorizationRequest(vehicle_authorization_request);
   OnVehicleAuthorizationRequestDelegate(link_id, managed_header, managed_vehicle_authorization_request, this);
   return 0;
}

void Node::RegisterVehicleAuthorizationRequestEvent(VehicleAuthorizationRequestDelegate^ VehicleAuthorizationRequestEvent)
{
   OnVehicleAuthorizationRequestDelegate = VehicleAuthorizationRequestEvent;
   OnVehicleAuthorizationRequestCallback = gcnew VehicleAuthorizationRequestCallback(this, &Node::VehicleAuthorizationRequestHelper);
   OnVehicleAuthorizationRequestPtr = Marshal::GetFunctionPointerForDelegate(OnVehicleAuthorizationRequestCallback);
   node->register_on_vehicle_authorization_request(static_cast<protonet::vehicle_authorization_request_callback>(OnVehicleAuthorizationRequestPtr.ToPointer()));
}

void* Node::VehicleAuthorizationReplyHelper(int8_t link_id, proto_header_t header, vehicle_authorization_reply_t vehicle_authorization_reply, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleAuthorizationReply^ managed_vehicle_authorization_reply = gcnew VehicleAuthorizationReply(vehicle_authorization_reply);
   OnVehicleAuthorizationReplyDelegate(link_id, managed_header, managed_vehicle_authorization_reply, this);
   return 0;
}

void Node::RegisterVehicleAuthorizationReplyEvent(VehicleAuthorizationReplyDelegate^ VehicleAuthorizationReplyEvent)
{
   OnVehicleAuthorizationReplyDelegate = VehicleAuthorizationReplyEvent;
   OnVehicleAuthorizationReplyCallback = gcnew VehicleAuthorizationReplyCallback(this, &Node::VehicleAuthorizationReplyHelper);
   OnVehicleAuthorizationReplyPtr = Marshal::GetFunctionPointerForDelegate(OnVehicleAuthorizationReplyCallback);
   node->register_on_vehicle_authorization_reply(static_cast<protonet::vehicle_authorization_reply_callback>(OnVehicleAuthorizationReplyPtr.ToPointer()));
}

void* Node::VehicleModeCommandHelper(int8_t link_id, proto_header_t header, vehicle_mode_command_t vehicle_mode_command, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleModeCommand^ managed_vehicle_mode_command = gcnew VehicleModeCommand(vehicle_mode_command);
   OnVehicleModeCommandDelegate(link_id, managed_header, managed_vehicle_mode_command, this);
   return 0;
}

void Node::RegisterVehicleModeCommandEvent(VehicleModeCommandDelegate^ VehicleModeCommandEvent)
{
   OnVehicleModeCommandDelegate = VehicleModeCommandEvent;
   OnVehicleModeCommandCallback = gcnew VehicleModeCommandCallback(this, &Node::VehicleModeCommandHelper);
   OnVehicleModeCommandPtr = Marshal::GetFunctionPointerForDelegate(OnVehicleModeCommandCallback);
   node->register_on_vehicle_mode_command(static_cast<protonet::vehicle_mode_command_callback>(OnVehicleModeCommandPtr.ToPointer()));
}

void* Node::VehicleTerminationCommandHelper(int8_t link_id, proto_header_t header, vehicle_termination_command_t vehicle_termination_command, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleTerminationCommand^ managed_vehicle_termination_command = gcnew VehicleTerminationCommand(vehicle_termination_command);
   OnVehicleTerminationCommandDelegate(link_id, managed_header, managed_vehicle_termination_command, this);
   return 0;
}

void Node::RegisterVehicleTerminationCommandEvent(VehicleTerminationCommandDelegate^ VehicleTerminationCommandEvent)
{
   OnVehicleTerminationCommandDelegate = VehicleTerminationCommandEvent;
   OnVehicleTerminationCommandCallback = gcnew VehicleTerminationCommandCallback(this, &Node::VehicleTerminationCommandHelper);
   OnVehicleTerminationCommandPtr = Marshal::GetFunctionPointerForDelegate(OnVehicleTerminationCommandCallback);
   node->register_on_vehicle_termination_command(static_cast<protonet::vehicle_termination_command_callback>(OnVehicleTerminationCommandPtr.ToPointer()));
}

void* Node::VehicleTelemetryCommandHelper(int8_t link_id, proto_header_t header, vehicle_telemetry_command_t vehicle_telemetry_command, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleTelemetryCommand^ managed_vehicle_telemetry_command = gcnew VehicleTelemetryCommand(vehicle_telemetry_command);
   OnVehicleTelemetryCommandDelegate(link_id, managed_header, managed_vehicle_telemetry_command, this);
   return 0;
}

void Node::RegisterVehicleTelemetryCommandEvent(VehicleTelemetryCommandDelegate^ VehicleTelemetryCommandEvent)
{
   OnVehicleTelemetryCommandDelegate = VehicleTelemetryCommandEvent;
   OnVehicleTelemetryCommandCallback = gcnew VehicleTelemetryCommandCallback(this, &Node::VehicleTelemetryCommandHelper);
   OnVehicleTelemetryCommandPtr = Marshal::GetFunctionPointerForDelegate(OnVehicleTelemetryCommandCallback);
   node->register_on_vehicle_telemetry_command(static_cast<protonet::vehicle_telemetry_command_callback>(OnVehicleTelemetryCommandPtr.ToPointer()));
}

void* Node::VehicleWaypointCommandHelper(int8_t link_id, proto_header_t header, vehicle_waypoint_command_t vehicle_waypoint_command, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleWaypointCommand^ managed_vehicle_waypoint_command = gcnew VehicleWaypointCommand(vehicle_waypoint_command);
   OnVehicleWaypointCommandDelegate(link_id, managed_header, managed_vehicle_waypoint_command, this);
   return 0;
}

void Node::RegisterVehicleWaypointCommandEvent(VehicleWaypointCommandDelegate^ VehicleWaypointCommandEvent)
{
   OnVehicleWaypointCommandDelegate = VehicleWaypointCommandEvent;
   OnVehicleWaypointCommandCallback = gcnew VehicleWaypointCommandCallback(this, &Node::VehicleWaypointCommandHelper);
   OnVehicleWaypointCommandPtr = Marshal::GetFunctionPointerForDelegate(OnVehicleWaypointCommandCallback);
   node->register_on_vehicle_waypoint_command(static_cast<protonet::vehicle_waypoint_command_callback>(OnVehicleWaypointCommandPtr.ToPointer()));
}

void* Node::VehicleSystemStatusHelper(int8_t link_id, proto_header_t header, vehicle_system_status_t vehicle_system_status, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleSystemStatus^ managed_vehicle_system_status = gcnew VehicleSystemStatus(vehicle_system_status);
   OnVehicleSystemStatusDelegate(link_id, managed_header, managed_vehicle_system_status, this);
   return 0;
}

void Node::RegisterVehicleSystemStatusEvent(VehicleSystemStatusDelegate^ VehicleSystemStatusEvent)
{
   OnVehicleSystemStatusDelegate = VehicleSystemStatusEvent;
   OnVehicleSystemStatusCallback = gcnew VehicleSystemStatusCallback(this, &Node::VehicleSystemStatusHelper);
   OnVehicleSystemStatusPtr = Marshal::GetFunctionPointerForDelegate(OnVehicleSystemStatusCallback);
   node->register_on_vehicle_system_status(static_cast<protonet::vehicle_system_status_callback>(OnVehicleSystemStatusPtr.ToPointer()));
}

void* Node::VehicleInertialStateHelper(int8_t link_id, proto_header_t header, vehicle_inertial_state_t vehicle_inertial_state, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleInertialState^ managed_vehicle_inertial_state = gcnew VehicleInertialState(vehicle_inertial_state);
   OnVehicleInertialStateDelegate(link_id, managed_header, managed_vehicle_inertial_state, this);
   return 0;
}

void Node::RegisterVehicleInertialStateEvent(VehicleInertialStateDelegate^ VehicleInertialStateEvent)
{
   OnVehicleInertialStateDelegate = VehicleInertialStateEvent;
   OnVehicleInertialStateCallback = gcnew VehicleInertialStateCallback(this, &Node::VehicleInertialStateHelper);
   OnVehicleInertialStatePtr = Marshal::GetFunctionPointerForDelegate(OnVehicleInertialStateCallback);
   node->register_on_vehicle_inertial_state(static_cast<protonet::vehicle_inertial_state_callback>(OnVehicleInertialStatePtr.ToPointer()));
}

void* Node::VehicleGlobalPositionHelper(int8_t link_id, proto_header_t header, vehicle_global_position_t vehicle_global_position, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleGlobalPosition^ managed_vehicle_global_position = gcnew VehicleGlobalPosition(vehicle_global_position);
   OnVehicleGlobalPositionDelegate(link_id, managed_header, managed_vehicle_global_position, this);
   return 0;
}

void Node::RegisterVehicleGlobalPositionEvent(VehicleGlobalPositionDelegate^ VehicleGlobalPositionEvent)
{
   OnVehicleGlobalPositionDelegate = VehicleGlobalPositionEvent;
   OnVehicleGlobalPositionCallback = gcnew VehicleGlobalPositionCallback(this, &Node::VehicleGlobalPositionHelper);
   OnVehicleGlobalPositionPtr = Marshal::GetFunctionPointerForDelegate(OnVehicleGlobalPositionCallback);
   node->register_on_vehicle_global_position(static_cast<protonet::vehicle_global_position_callback>(OnVehicleGlobalPositionPtr.ToPointer()));
}

void* Node::VehicleBodySensedStateHelper(int8_t link_id, proto_header_t header, vehicle_body_sensed_state_t vehicle_body_sensed_state, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleBodySensedState^ managed_vehicle_body_sensed_state = gcnew VehicleBodySensedState(vehicle_body_sensed_state);
   OnVehicleBodySensedStateDelegate(link_id, managed_header, managed_vehicle_body_sensed_state, this);
   return 0;
}

void Node::RegisterVehicleBodySensedStateEvent(VehicleBodySensedStateDelegate^ VehicleBodySensedStateEvent)
{
   OnVehicleBodySensedStateDelegate = VehicleBodySensedStateEvent;
   OnVehicleBodySensedStateCallback = gcnew VehicleBodySensedStateCallback(this, &Node::VehicleBodySensedStateHelper);
   OnVehicleBodySensedStatePtr = Marshal::GetFunctionPointerForDelegate(OnVehicleBodySensedStateCallback);
   node->register_on_vehicle_body_sensed_state(static_cast<protonet::vehicle_body_sensed_state_callback>(OnVehicleBodySensedStatePtr.ToPointer()));
}

void* Node::VehicleAttitudeHelper(int8_t link_id, proto_header_t header, vehicle_attitude_t vehicle_attitude, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleAttitude^ managed_vehicle_attitude = gcnew VehicleAttitude(vehicle_attitude);
   OnVehicleAttitudeDelegate(link_id, managed_header, managed_vehicle_attitude, this);
   return 0;
}

void Node::RegisterVehicleAttitudeEvent(VehicleAttitudeDelegate^ VehicleAttitudeEvent)
{
   OnVehicleAttitudeDelegate = VehicleAttitudeEvent;
   OnVehicleAttitudeCallback = gcnew VehicleAttitudeCallback(this, &Node::VehicleAttitudeHelper);
   OnVehicleAttitudePtr = Marshal::GetFunctionPointerForDelegate(OnVehicleAttitudeCallback);
   node->register_on_vehicle_attitude(static_cast<protonet::vehicle_attitude_callback>(OnVehicleAttitudePtr.ToPointer()));
}

void* Node::VehicleGroundRelativeStateHelper(int8_t link_id, proto_header_t header, vehicle_ground_relative_state_t vehicle_ground_relative_state, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   VehicleGroundRelativeState^ managed_vehicle_ground_relative_state = gcnew VehicleGroundRelativeState(vehicle_ground_relative_state);
   OnVehicleGroundRelativeStateDelegate(link_id, managed_header, managed_vehicle_ground_relative_state, this);
   return 0;
}

void Node::RegisterVehicleGroundRelativeStateEvent(VehicleGroundRelativeStateDelegate^ VehicleGroundRelativeStateEvent)
{
   OnVehicleGroundRelativeStateDelegate = VehicleGroundRelativeStateEvent;
   OnVehicleGroundRelativeStateCallback = gcnew VehicleGroundRelativeStateCallback(this, &Node::VehicleGroundRelativeStateHelper);
   OnVehicleGroundRelativeStatePtr = Marshal::GetFunctionPointerForDelegate(OnVehicleGroundRelativeStateCallback);
   node->register_on_vehicle_ground_relative_state(static_cast<protonet::vehicle_ground_relative_state_callback>(OnVehicleGroundRelativeStatePtr.ToPointer()));
}

void* Node::PayloadBayCommandHelper(int8_t link_id, proto_header_t header, payload_bay_command_t payload_bay_command, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   PayloadBayCommand^ managed_payload_bay_command = gcnew PayloadBayCommand(payload_bay_command);
   OnPayloadBayCommandDelegate(link_id, managed_header, managed_payload_bay_command, this);
   return 0;
}

void Node::RegisterPayloadBayCommandEvent(PayloadBayCommandDelegate^ PayloadBayCommandEvent)
{
   OnPayloadBayCommandDelegate = PayloadBayCommandEvent;
   OnPayloadBayCommandCallback = gcnew PayloadBayCommandCallback(this, &Node::PayloadBayCommandHelper);
   OnPayloadBayCommandPtr = Marshal::GetFunctionPointerForDelegate(OnPayloadBayCommandCallback);
   node->register_on_payload_bay_command(static_cast<protonet::payload_bay_command_callback>(OnPayloadBayCommandPtr.ToPointer()));
}

void* Node::PayloadBayModeCommandHelper(int8_t link_id, proto_header_t header, payload_bay_mode_command_t payload_bay_mode_command, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   PayloadBayModeCommand^ managed_payload_bay_mode_command = gcnew PayloadBayModeCommand(payload_bay_mode_command);
   OnPayloadBayModeCommandDelegate(link_id, managed_header, managed_payload_bay_mode_command, this);
   return 0;
}

void Node::RegisterPayloadBayModeCommandEvent(PayloadBayModeCommandDelegate^ PayloadBayModeCommandEvent)
{
   OnPayloadBayModeCommandDelegate = PayloadBayModeCommandEvent;
   OnPayloadBayModeCommandCallback = gcnew PayloadBayModeCommandCallback(this, &Node::PayloadBayModeCommandHelper);
   OnPayloadBayModeCommandPtr = Marshal::GetFunctionPointerForDelegate(OnPayloadBayModeCommandCallback);
   node->register_on_payload_bay_mode_command(static_cast<protonet::payload_bay_mode_command_callback>(OnPayloadBayModeCommandPtr.ToPointer()));
}

void* Node::TargetDesignationCommandHelper(int8_t link_id, proto_header_t header, target_designation_command_t target_designation_command, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   TargetDesignationCommand^ managed_target_designation_command = gcnew TargetDesignationCommand(target_designation_command);
   OnTargetDesignationCommandDelegate(link_id, managed_header, managed_target_designation_command, this);
   return 0;
}

void Node::RegisterTargetDesignationCommandEvent(TargetDesignationCommandDelegate^ TargetDesignationCommandEvent)
{
   OnTargetDesignationCommandDelegate = TargetDesignationCommandEvent;
   OnTargetDesignationCommandCallback = gcnew TargetDesignationCommandCallback(this, &Node::TargetDesignationCommandHelper);
   OnTargetDesignationCommandPtr = Marshal::GetFunctionPointerForDelegate(OnTargetDesignationCommandCallback);
   node->register_on_target_designation_command(static_cast<protonet::target_designation_command_callback>(OnTargetDesignationCommandPtr.ToPointer()));
}

void* Node::UGVJoystickHelper(int8_t link_id, proto_header_t header, UGV_joystick_t UGV_joystick, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   UGVJoystick^ managed_UGV_joystick = gcnew UGVJoystick(UGV_joystick);
   OnUGVJoystickDelegate(link_id, managed_header, managed_UGV_joystick, this);
   return 0;
}

void Node::RegisterUGVJoystickEvent(UGVJoystickDelegate^ UGVJoystickEvent)
{
   OnUGVJoystickDelegate = UGVJoystickEvent;
   OnUGVJoystickCallback = gcnew UGVJoystickCallback(this, &Node::UGVJoystickHelper);
   OnUGVJoystickPtr = Marshal::GetFunctionPointerForDelegate(OnUGVJoystickCallback);
   node->register_on_UGV_joystick(static_cast<protonet::UGV_joystick_callback>(OnUGVJoystickPtr.ToPointer()));
}

void* Node::UGVBatteryStatusHelper(int8_t link_id, proto_header_t header, UGV_battery_status_t UGV_battery_status, protonet::node* ptr)
{
   Header^ managed_header = gcnew Header(header);
   UGVBatteryStatus^ managed_UGV_battery_status = gcnew UGVBatteryStatus(UGV_battery_status);
   OnUGVBatteryStatusDelegate(link_id, managed_header, managed_UGV_battery_status, this);
   return 0;
}

void Node::RegisterUGVBatteryStatusEvent(UGVBatteryStatusDelegate^ UGVBatteryStatusEvent)
{
   OnUGVBatteryStatusDelegate = UGVBatteryStatusEvent;
   OnUGVBatteryStatusCallback = gcnew UGVBatteryStatusCallback(this, &Node::UGVBatteryStatusHelper);
   OnUGVBatteryStatusPtr = Marshal::GetFunctionPointerForDelegate(OnUGVBatteryStatusCallback);
   node->register_on_UGV_battery_status(static_cast<protonet::UGV_battery_status_callback>(OnUGVBatteryStatusPtr.ToPointer()));
}

