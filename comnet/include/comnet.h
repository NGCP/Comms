/**@file This file was autogenerated. All changes will be undone. */

#ifndef _COMNET_H_
#define _COMNET_H_

/*Include files*/ 
#include <datalink.h>
#include <comnet_protocol.h>
#include <pqueue.h>
#include <threadCom.h>
#include <error_handle.h>
/** include encryption header*/
#include "aes.h"
using CryptoPP::AES;

//If creating C# wrapper 
//#define _MANAGED

/** C# wrapper can not load fstream, to fix this problem if windows, then
use managed c++ code to open and read file*/
#ifdef _MANAGED
    #using<system.dll>
    using namespace System;
    using namespace System::IO;
    using namespace System::Runtime::InteropServices;
#else
    #include <fstream>
    #include <string>
#endif

namespace comnet
{
   /*Let compiler know class node exists some where else */ 
   class node;

   /**Global function call back used for message Enter must be implemented on platform for use*/ 
   typedef void* (*enter_callback)(int8_t, com_header_t, enter_t, comnet::node* node_ptr);
   /**Global function call back used for message Ping must be implemented on platform for use*/ 
   typedef void* (*ping_callback)(int8_t, com_header_t, ping_t, comnet::node* node_ptr);
   /**Global function call back used for message Pong must be implemented on platform for use*/ 
   typedef void* (*pong_callback)(int8_t, com_header_t, pong_t, comnet::node* node_ptr);
   /**Global function call back used for message Exit must be implemented on platform for use*/ 
   typedef void* (*exit_callback)(int8_t, com_header_t, exit_t, comnet::node* node_ptr);
   /**Global function call back used for message Raw_Data must be implemented on platform for use*/ 
   typedef void* (*raw_data_callback)(int8_t, com_header_t, raw_data_t, comnet::node* node_ptr);
   /**Global function call back used for message Connection_Request must be implemented on platform for use*/ 
   typedef void* (*connection_request_callback)(int8_t, com_header_t, connection_request_t, comnet::node* node_ptr);
   /**Global function call back used for message Connection_Reply must be implemented on platform for use*/ 
   typedef void* (*connection_reply_callback)(int8_t, com_header_t, connection_reply_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Identification must be implemented on platform for use*/ 
   typedef void* (*vehicle_identification_callback)(int8_t, com_header_t, vehicle_identification_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Authorization_Request must be implemented on platform for use*/ 
   typedef void* (*vehicle_authorization_request_callback)(int8_t, com_header_t, vehicle_authorization_request_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Authorization_Reply must be implemented on platform for use*/ 
   typedef void* (*vehicle_authorization_reply_callback)(int8_t, com_header_t, vehicle_authorization_reply_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Mode_Command must be implemented on platform for use*/ 
   typedef void* (*vehicle_mode_command_callback)(int8_t, com_header_t, vehicle_mode_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Joystick_Command must be implemented on platform for use*/ 
   typedef void* (*vehicle_joystick_command_callback)(int8_t, com_header_t, vehicle_joystick_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Termination_Command must be implemented on platform for use*/ 
   typedef void* (*vehicle_termination_command_callback)(int8_t, com_header_t, vehicle_termination_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Telemetry_Command must be implemented on platform for use*/ 
   typedef void* (*vehicle_telemetry_command_callback)(int8_t, com_header_t, vehicle_telemetry_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_System_Status must be implemented on platform for use*/ 
   typedef void* (*vehicle_system_status_callback)(int8_t, com_header_t, vehicle_system_status_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Inertial_State must be implemented on platform for use*/ 
   typedef void* (*vehicle_inertial_state_callback)(int8_t, com_header_t, vehicle_inertial_state_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Global_Position must be implemented on platform for use*/ 
   typedef void* (*vehicle_global_position_callback)(int8_t, com_header_t, vehicle_global_position_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Body_Sensed_State must be implemented on platform for use*/ 
   typedef void* (*vehicle_body_sensed_state_callback)(int8_t, com_header_t, vehicle_body_sensed_state_t, comnet::node* node_ptr);
   /**Global function call back used for message Vehicle_Attitude must be implemented on platform for use*/ 
   typedef void* (*vehicle_attitude_callback)(int8_t, com_header_t, vehicle_attitude_t, comnet::node* node_ptr);
   /**Global function call back used for message Air_Vehicle_Ground_Relative_State must be implemented on platform for use*/ 
   typedef void* (*air_vehicle_ground_relative_state_callback)(int8_t, com_header_t, air_vehicle_ground_relative_state_t, comnet::node* node_ptr);
   /**Global function call back used for message Payload_Bay_Command must be implemented on platform for use*/ 
   typedef void* (*payload_bay_command_callback)(int8_t, com_header_t, payload_bay_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Payload_Data_Recorder_Command must be implemented on platform for use*/ 
   typedef void* (*payload_data_recorder_command_callback)(int8_t, com_header_t, payload_data_recorder_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Payload_Operation_Command must be implemented on platform for use*/ 
   typedef void* (*payload_operation_command_callback)(int8_t, com_header_t, payload_operation_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Communications_Payload_Command must be implemented on platform for use*/ 
   typedef void* (*communications_payload_command_callback)(int8_t, com_header_t, communications_payload_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Communications_Payload_Configuration_Command must be implemented on platform for use*/ 
   typedef void* (*communications_payload_configuration_command_callback)(int8_t, com_header_t, communications_payload_configuration_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Payload_Bay_Mode_Command must be implemented on platform for use*/ 
   typedef void* (*payload_bay_mode_command_callback)(int8_t, com_header_t, payload_bay_mode_command_t, comnet::node* node_ptr);
   /**Global function call back used for message Payload_Bay_Status must be implemented on platform for use*/ 
   typedef void* (*payload_bay_status_callback)(int8_t, com_header_t, payload_bay_status_t, comnet::node* node_ptr);
   /**Global function call back used for message Payload_Data_Recorder_Status must be implemented on platform for use*/ 
   typedef void* (*payload_data_recorder_status_callback)(int8_t, com_header_t, payload_data_recorder_status_t, comnet::node* node_ptr);
   /**Global function call back used for message Payload_Operating_Status must be implemented on platform for use*/ 
   typedef void* (*payload_operating_status_callback)(int8_t, com_header_t, payload_operating_status_t, comnet::node* node_ptr);
   /**Global function call back used for message Communications_Payload_Status must be implemented on platform for use*/ 
   typedef void* (*communications_payload_status_callback)(int8_t, com_header_t, communications_payload_status_t, comnet::node* node_ptr);
   /**Global function call back used for message Target_Status must be implemented on platform for use*/ 
   typedef void* (*target_status_callback)(int8_t, com_header_t, target_status_t, comnet::node* node_ptr);
   /**Global function call back used for message Target_Acknowledgement must be implemented on platform for use*/ 
   typedef void* (*target_acknowledgement_callback)(int8_t, com_header_t, target_acknowledgement_t, comnet::node* node_ptr);
   /**Global function call back used for message UAV_Location must be implemented on platform for use*/ 
   typedef void* (*UAV_location_callback)(int8_t, com_header_t, UAV_location_t, comnet::node* node_ptr);
   /**Global function call back used for message UAV_Speed must be implemented on platform for use*/ 
   typedef void* (*UAV_speed_callback)(int8_t, com_header_t, UAV_speed_t, comnet::node* node_ptr);
   /**Global function call back used for message UAV_Heading must be implemented on platform for use*/ 
   typedef void* (*UAV_heading_callback)(int8_t, com_header_t, UAV_heading_t, comnet::node* node_ptr);
   /**Global function call back used for message UAV_Battery must be implemented on platform for use*/ 
   typedef void* (*UAV_battery_callback)(int8_t, com_header_t, UAV_battery_t, comnet::node* node_ptr);
   /**Global function call back used for message UAV_Collision_Avodiance_Status must be implemented on platform for use*/ 
   typedef void* (*UAV_collision_avodiance_status_callback)(int8_t, com_header_t, UAV_collision_avodiance_status_t, comnet::node* node_ptr);
   /**Global function call back used for message UAV_Mission_Status must be implemented on platform for use*/ 
   typedef void* (*UAV_mission_status_callback)(int8_t, com_header_t, UAV_mission_status_t, comnet::node* node_ptr);
   /**Global function call back used for message UAV_Collision_Avodiance_Message must be implemented on platform for use*/ 
   typedef void* (*UAV_collision_avodiance_message_callback)(int8_t, com_header_t, UAV_collision_avodiance_message_t, comnet::node* node_ptr);
   /**Global function call back used for message UUV_Status must be implemented on platform for use*/ 
   typedef void* (*UUV_status_callback)(int8_t, com_header_t, UUV_status_t, comnet::node* node_ptr);
   /**Global function call back used for message ROV_Status_Message must be implemented on platform for use*/ 
   typedef void* (*ROV_status_message_callback)(int8_t, com_header_t, ROV_status_message_t, comnet::node* node_ptr);
   
	/** Class node represents each point of communication. The Node will be able to establish type of communication and send and receive messages. The callbacks must be implemented on the platform*/
   class node
   {
   public:
      node(uint8_t node_id);
      node(uint8_t node_id, int32_t mode);
      ~node();
      /**Public method used to start node connection and messages*/ 
      void start();

      /** Public method used to add serial communication*/ 
      void add_serial(int8_t* link_id, uint32_t baud_rate, char device_path[50]);
      /** Public method used to add UDP communication*/ 
      void add_udp(int8_t* link_id, uint16_t port);
      /** Public method used to add UDP communication*/ 
      void add_udp(int8_t* link_id, uint16_t port, char addr[16]);

      /** Public method used to add ZigBee communication*/ 
      void add_zigBee(int8_t* link_id, uint32_t baudRate, char device_path[50]);
      /** Public method used to establish ZigBee communication*/ 
       void establish_zigBee(int8_t link_id, uint8_t node_id, std::string address64Hex);
      /** Public method used to establish serial communication*/ 
      void establish_serial(int8_t link_id, uint8_t node_id);
      /** Public method used to establish UDP communication*/ 
      void establish_udp(int8_t link_id, uint8_t node_id, uint16_t port, char addr[16]);

      /** method returns the number of datalink for this node*/ 
      uint8_t get_num_datalinks();
      /**Public method used to find if datalink is connected*/ 
      int32_t query_datalink_connected(int8_t link_id);
      /**Public method used to find what type of communication the datalink is*/ 
      datalink_type_t query_datalink_type(int8_t link_id);

      /**Public definition of the send Enter message which will be put into the message queue.*/ 
      void send_enter(
         uint8_t dest_id,
         float64_t timestamp,
         bool is_emergency = false);

      /**Public definition of the send Ping message which will be put into the message queue.*/ 
      void send_ping(
         uint8_t dest_id,
         float64_t timestamp,
         bool is_emergency = false);

      /**Public definition of the send Pong message which will be put into the message queue.*/ 
      void send_pong(
         uint8_t dest_id,
         float64_t timestamp,
         bool is_emergency = false);

      /**Public definition of the send Exit message which will be put into the message queue.*/ 
      void send_exit(
         uint8_t dest_id,
         float64_t timestamp,
         bool is_emergency = false);

      /**Public definition of the send Raw_Data message which will be put into the message queue.*/ 
      void send_raw_data(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t length,
         uint8_t data,
         bool is_emergency = false);

      /**Public definition of the send Connection_Request message which will be put into the message queue.*/ 
      void send_connection_request(
         uint8_t dest_id,
         float64_t timestamp,
         uint8_t trace_node_1,
         uint8_t trace_node_n,
         bool is_emergency = false);

      /**Public definition of the send Connection_Reply message which will be put into the message queue.*/ 
      void send_connection_reply(
         uint8_t dest_id,
         float64_t timestamp,
         uint8_t connection_ID,
         uint8_t trace_node_n,
         uint8_t trace_node_n_1,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Identification message which will be put into the message queue.*/ 
      void send_vehicle_identification(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         uint8_t vehicle_type,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Authorization_Request message which will be put into the message queue.*/ 
      void send_vehicle_authorization_request(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         uint8_t vehicle_type,
         uint8_t authorized_services,
         uint8_t granted_services,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Authorization_Reply message which will be put into the message queue.*/ 
      void send_vehicle_authorization_reply(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         uint8_t vehicle_type,
         uint8_t authorized_services,
         uint8_t granted_services,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Mode_Command message which will be put into the message queue.*/ 
      void send_vehicle_mode_command(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         uint8_t vehicle_mode,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Joystick_Command message which will be put into the message queue.*/ 
      void send_vehicle_joystick_command(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         float32_t steering,
         float32_t throttle,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Termination_Command message which will be put into the message queue.*/ 
      void send_vehicle_termination_command(
         uint8_t dest_id,
         uint64_t timestamp,
         uint16_t vehicle_ID,
         uint8_t termination_mode,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Telemetry_Command message which will be put into the message queue.*/ 
      void send_vehicle_telemetry_command(
         uint8_t dest_id,
         uint64_t timestamp,
         uint16_t vehicle_ID,
         uint8_t telemetry_select,
         uint8_t telemetry_rate,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_System_Status message which will be put into the message queue.*/ 
      void send_vehicle_system_status(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         uint8_t vehicle_mode,
         uint8_t vehicle_state,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Inertial_State message which will be put into the message queue.*/ 
      void send_vehicle_inertial_state(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         float64_t latitude,
         float64_t longitude,
         float32_t altitude,
         float32_t roll,
         float32_t pitch,
         float32_t heading,
         float32_t north_speed,
         float32_t east_speed,
         float32_t vertical_speed,
         float32_t roll_rate,
         float32_t pitch_rate,
         float32_t yaw_rate,
         float32_t north_accel,
         float32_t east_accel,
         float32_t vertical_accel,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Global_Position message which will be put into the message queue.*/ 
      void send_vehicle_global_position(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         int32_t latitude,
         int32_t longitude,
         int32_t altitude,
         int16_t x_speed,
         int16_t y_speed,
         int16_t z_speed,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Body_Sensed_State message which will be put into the message queue.*/ 
      void send_vehicle_body_sensed_state(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         int16_t x_accel,
         int16_t y_accel,
         int16_t z_accel,
         int16_t roll_rate,
         int16_t pitch_rate,
         int16_t yaw_rate,
         bool is_emergency = false);

      /**Public definition of the send Vehicle_Attitude message which will be put into the message queue.*/ 
      void send_vehicle_attitude(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         float32_t roll,
         float32_t pitch,
         float32_t yaw,
         bool is_emergency = false);

      /**Public definition of the send Air_Vehicle_Ground_Relative_State message which will be put into the message queue.*/ 
      void send_air_vehicle_ground_relative_state(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         float32_t angle_of_attack,
         float32_t angle_of_sideslip,
         float32_t true_airspeed,
         float32_t indicated_airspeed,
         float32_t north_wind_speed,
         float32_t east_wind_speed,
         float32_t north_ground_speed,
         float32_t east_ground_speed,
         float32_t barometric_pressure,
         float32_t barometric_altitude,
         bool is_emergency = false);

      /**Public definition of the send Payload_Bay_Command message which will be put into the message queue.*/ 
      void send_payload_bay_command(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t payload_bay_ID,
         uint8_t payload_command,
         bool is_emergency = false);

      /**Public definition of the send Payload_Data_Recorder_Command message which will be put into the message queue.*/ 
      void send_payload_data_recorder_command(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t payload_ID,
         uint8_t payload_recorder_mode,
         bool is_emergency = false);

      /**Public definition of the send Payload_Operation_Command message which will be put into the message queue.*/ 
      void send_payload_operation_command(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t payload_ID,
         uint8_t payload_command,
         bool is_emergency = false);

      /**Public definition of the send Communications_Payload_Command message which will be put into the message queue.*/ 
      void send_communications_payload_command(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t comms_payload_ID,
         uint8_t comms_payload_command,
         bool is_emergency = false);

      /**Public definition of the send Communications_Payload_Configuration_Command message which will be put into the message queue.*/ 
      void send_communications_payload_configuration_command(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t comms_payload_ID,
         uint8_t comms_payload_mode,
         bool is_emergency = false);

      /**Public definition of the send Payload_Bay_Mode_Command message which will be put into the message queue.*/ 
      void send_payload_bay_mode_command(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t payload_ID,
         uint8_t payload_mode,
         bool is_emergency = false);

      /**Public definition of the send Payload_Bay_Status message which will be put into the message queue.*/ 
      void send_payload_bay_status(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t payload_bay_ID,
         uint8_t payload_bay_mode,
         uint8_t payload_status,
         bool is_emergency = false);

      /**Public definition of the send Payload_Data_Recorder_Status message which will be put into the message queue.*/ 
      void send_payload_data_recorder_status(
         uint8_t dest_id,
         float64_t timestamp,
         uint8_t data_recorder_mode,
         bool is_emergency = false);

      /**Public definition of the send Payload_Operating_Status message which will be put into the message queue.*/ 
      void send_payload_operating_status(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t payload_ID,
         uint8_t payload_mode,
         uint8_t payload_status,
         bool is_emergency = false);

      /**Public definition of the send Communications_Payload_Status message which will be put into the message queue.*/ 
      void send_communications_payload_status(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t communications_ID,
         uint8_t communications_mode,
         uint8_t communications_status,
         bool is_emergency = false);

      /**Public definition of the send Target_Status message which will be put into the message queue.*/ 
      void send_target_status(
         uint8_t dest_id,
         float64_t timestamp,
         float64_t target_radius,
         float64_t target_angle,
         float64_t target_altitude,
         bool is_emergency = false);

      /**Public definition of the send Target_Acknowledgement message which will be put into the message queue.*/ 
      void send_target_acknowledgement(
         uint8_t dest_id,
         float64_t timestamp,
         uint8_t target_status,
         bool is_emergency = false);

      /**Public definition of the send UAV_Location message which will be put into the message queue.*/ 
      void send_UAV_location(
         uint8_t dest_id,
         float64_t timestamp,
         float64_t longitude,
         float64_t latitude,
         float64_t altitude,
         bool is_emergency = false);

      /**Public definition of the send UAV_Speed message which will be put into the message queue.*/ 
      void send_UAV_speed(
         uint8_t dest_id,
         float64_t timestamp,
         float64_t speed,
         bool is_emergency = false);

      /**Public definition of the send UAV_Heading message which will be put into the message queue.*/ 
      void send_UAV_heading(
         uint8_t dest_id,
         float64_t timestamp,
         float64_t heading,
         bool is_emergency = false);

      /**Public definition of the send UAV_Battery message which will be put into the message queue.*/ 
      void send_UAV_battery(
         uint8_t dest_id,
         float64_t timestamp,
         uint32_t battery_percentage,
         bool is_emergency = false);

      /**Public definition of the send UAV_Collision_Avodiance_Status message which will be put into the message queue.*/ 
      void send_UAV_collision_avodiance_status(
         uint8_t dest_id,
         float64_t timestamp,
         uint8_t ca_status,
         bool is_emergency = false);

      /**Public definition of the send UAV_Mission_Status message which will be put into the message queue.*/ 
      void send_UAV_mission_status(
         uint8_t dest_id,
         float64_t timestamp,
         uint8_t mission_status,
         bool is_emergency = false);

      /**Public definition of the send UAV_Collision_Avodiance_Message message which will be put into the message queue.*/ 
      void send_UAV_collision_avodiance_message(
         uint8_t dest_id,
         float64_t timestamp,
         uint8_t vehicle_ID,
         float64_t velocity,
         float64_t latitude,
         float64_t longtitude,
         float64_t altitude,
         uint8_t priority,
         bool is_emergency = false);

      /**Public definition of the send UUV_Status message which will be put into the message queue.*/ 
      void send_UUV_status(
         uint8_t dest_id,
         uint8_t status,
         bool is_emergency = false);

      /**Public definition of the send ROV_Status_Message message which will be put into the message queue.*/ 
      void send_ROV_status_message(
         uint8_t dest_id,
         float64_t timestamp,
         uint16_t vehicle_ID,
         uint16_t depth,
         uint16_t roll,
         uint16_t pitch,
         uint16_t heading,
         float32_t battery_percent,
         bool is_emergency = false);

      /**Public definition of the register on Enter message which will use the message call back.*/ 
      void register_on_enter(enter_callback callback){on_enter = callback;}
      /**Public definition of the register on Ping message which will use the message call back.*/ 
      void register_on_ping(ping_callback callback){on_ping = callback;}
      /**Public definition of the register on Pong message which will use the message call back.*/ 
      void register_on_pong(pong_callback callback){on_pong = callback;}
      /**Public definition of the register on Exit message which will use the message call back.*/ 
      void register_on_exit(exit_callback callback){on_exit = callback;}
      /**Public definition of the register on Raw_Data message which will use the message call back.*/ 
      void register_on_raw_data(raw_data_callback callback){on_raw_data = callback;}
      /**Public definition of the register on Connection_Request message which will use the message call back.*/ 
      void register_on_connection_request(connection_request_callback callback){on_connection_request = callback;}
      /**Public definition of the register on Connection_Reply message which will use the message call back.*/ 
      void register_on_connection_reply(connection_reply_callback callback){on_connection_reply = callback;}
      /**Public definition of the register on Vehicle_Identification message which will use the message call back.*/ 
      void register_on_vehicle_identification(vehicle_identification_callback callback){on_vehicle_identification = callback;}
      /**Public definition of the register on Vehicle_Authorization_Request message which will use the message call back.*/ 
      void register_on_vehicle_authorization_request(vehicle_authorization_request_callback callback){on_vehicle_authorization_request = callback;}
      /**Public definition of the register on Vehicle_Authorization_Reply message which will use the message call back.*/ 
      void register_on_vehicle_authorization_reply(vehicle_authorization_reply_callback callback){on_vehicle_authorization_reply = callback;}
      /**Public definition of the register on Vehicle_Mode_Command message which will use the message call back.*/ 
      void register_on_vehicle_mode_command(vehicle_mode_command_callback callback){on_vehicle_mode_command = callback;}
      /**Public definition of the register on Vehicle_Joystick_Command message which will use the message call back.*/ 
      void register_on_vehicle_joystick_command(vehicle_joystick_command_callback callback){on_vehicle_joystick_command = callback;}
      /**Public definition of the register on Vehicle_Termination_Command message which will use the message call back.*/ 
      void register_on_vehicle_termination_command(vehicle_termination_command_callback callback){on_vehicle_termination_command = callback;}
      /**Public definition of the register on Vehicle_Telemetry_Command message which will use the message call back.*/ 
      void register_on_vehicle_telemetry_command(vehicle_telemetry_command_callback callback){on_vehicle_telemetry_command = callback;}
      /**Public definition of the register on Vehicle_System_Status message which will use the message call back.*/ 
      void register_on_vehicle_system_status(vehicle_system_status_callback callback){on_vehicle_system_status = callback;}
      /**Public definition of the register on Vehicle_Inertial_State message which will use the message call back.*/ 
      void register_on_vehicle_inertial_state(vehicle_inertial_state_callback callback){on_vehicle_inertial_state = callback;}
      /**Public definition of the register on Vehicle_Global_Position message which will use the message call back.*/ 
      void register_on_vehicle_global_position(vehicle_global_position_callback callback){on_vehicle_global_position = callback;}
      /**Public definition of the register on Vehicle_Body_Sensed_State message which will use the message call back.*/ 
      void register_on_vehicle_body_sensed_state(vehicle_body_sensed_state_callback callback){on_vehicle_body_sensed_state = callback;}
      /**Public definition of the register on Vehicle_Attitude message which will use the message call back.*/ 
      void register_on_vehicle_attitude(vehicle_attitude_callback callback){on_vehicle_attitude = callback;}
      /**Public definition of the register on Air_Vehicle_Ground_Relative_State message which will use the message call back.*/ 
      void register_on_air_vehicle_ground_relative_state(air_vehicle_ground_relative_state_callback callback){on_air_vehicle_ground_relative_state = callback;}
      /**Public definition of the register on Payload_Bay_Command message which will use the message call back.*/ 
      void register_on_payload_bay_command(payload_bay_command_callback callback){on_payload_bay_command = callback;}
      /**Public definition of the register on Payload_Data_Recorder_Command message which will use the message call back.*/ 
      void register_on_payload_data_recorder_command(payload_data_recorder_command_callback callback){on_payload_data_recorder_command = callback;}
      /**Public definition of the register on Payload_Operation_Command message which will use the message call back.*/ 
      void register_on_payload_operation_command(payload_operation_command_callback callback){on_payload_operation_command = callback;}
      /**Public definition of the register on Communications_Payload_Command message which will use the message call back.*/ 
      void register_on_communications_payload_command(communications_payload_command_callback callback){on_communications_payload_command = callback;}
      /**Public definition of the register on Communications_Payload_Configuration_Command message which will use the message call back.*/ 
      void register_on_communications_payload_configuration_command(communications_payload_configuration_command_callback callback){on_communications_payload_configuration_command = callback;}
      /**Public definition of the register on Payload_Bay_Mode_Command message which will use the message call back.*/ 
      void register_on_payload_bay_mode_command(payload_bay_mode_command_callback callback){on_payload_bay_mode_command = callback;}
      /**Public definition of the register on Payload_Bay_Status message which will use the message call back.*/ 
      void register_on_payload_bay_status(payload_bay_status_callback callback){on_payload_bay_status = callback;}
      /**Public definition of the register on Payload_Data_Recorder_Status message which will use the message call back.*/ 
      void register_on_payload_data_recorder_status(payload_data_recorder_status_callback callback){on_payload_data_recorder_status = callback;}
      /**Public definition of the register on Payload_Operating_Status message which will use the message call back.*/ 
      void register_on_payload_operating_status(payload_operating_status_callback callback){on_payload_operating_status = callback;}
      /**Public definition of the register on Communications_Payload_Status message which will use the message call back.*/ 
      void register_on_communications_payload_status(communications_payload_status_callback callback){on_communications_payload_status = callback;}
      /**Public definition of the register on Target_Status message which will use the message call back.*/ 
      void register_on_target_status(target_status_callback callback){on_target_status = callback;}
      /**Public definition of the register on Target_Acknowledgement message which will use the message call back.*/ 
      void register_on_target_acknowledgement(target_acknowledgement_callback callback){on_target_acknowledgement = callback;}
      /**Public definition of the register on UAV_Location message which will use the message call back.*/ 
      void register_on_UAV_location(UAV_location_callback callback){on_UAV_location = callback;}
      /**Public definition of the register on UAV_Speed message which will use the message call back.*/ 
      void register_on_UAV_speed(UAV_speed_callback callback){on_UAV_speed = callback;}
      /**Public definition of the register on UAV_Heading message which will use the message call back.*/ 
      void register_on_UAV_heading(UAV_heading_callback callback){on_UAV_heading = callback;}
      /**Public definition of the register on UAV_Battery message which will use the message call back.*/ 
      void register_on_UAV_battery(UAV_battery_callback callback){on_UAV_battery = callback;}
      /**Public definition of the register on UAV_Collision_Avodiance_Status message which will use the message call back.*/ 
      void register_on_UAV_collision_avodiance_status(UAV_collision_avodiance_status_callback callback){on_UAV_collision_avodiance_status = callback;}
      /**Public definition of the register on UAV_Mission_Status message which will use the message call back.*/ 
      void register_on_UAV_mission_status(UAV_mission_status_callback callback){on_UAV_mission_status = callback;}
      /**Public definition of the register on UAV_Collision_Avodiance_Message message which will use the message call back.*/ 
      void register_on_UAV_collision_avodiance_message(UAV_collision_avodiance_message_callback callback){on_UAV_collision_avodiance_message = callback;}
      /**Public definition of the register on UUV_Status message which will use the message call back.*/ 
      void register_on_UUV_status(UUV_status_callback callback){on_UUV_status = callback;}
      /**Public definition of the register on ROV_Status_Message message which will use the message call back.*/ 
      void register_on_ROV_status_message(ROV_status_message_callback callback){on_ROV_status_message = callback;}

   private:
      /**Private data member hold the node id.*/ 
      uint8_t node_id;

      /**Private data member used to keep track of the number of data links associated with this node*/ 
      int8_t num_datalinks;
      /**Private array used to store all the datalink in this node*/ 
      datalink* datalinks[255];
      /**Private data member to keep track of the threads associated with this node*/ 
      thread_t datalink_threads[255];

      /**Private pointer to the message queue*/ 
      com_msg_queue queue;
      /**Add key to comnet class*/
      uint8_t key[AES::DEFAULT_KEYLENGTH];
      /** Method to read key form text file*/
      void readKey();
      /**Private method to handle the message to determine the type of message and its following actions  */ 
      void handle_com_msg_t(com_msg_t* rx_msg, com_msg_buf_t* rx_buf);

      /**Private data member to hold thread handler*/ 
      thread_t handler_thread;
      /**Private method which is entry point for the event handler that performs callbacks based on incoming messages  */ 
      void* comnet_handler();
      /**Private method Helper functions from C style from C++ entry point with class member linkage*/ 
      static void* handler_helper(void* context);

      /**Private data member to keep track of upkeep thread data.*/ 
      thread_t upkeep_thread;
      /**Private method for posix and windows compatible sleep method*/ 
      void* upkeep_handler();
      /**Private method returns pointer to upkeep_handler*/ 
      static void* upkeep_helper(void* context);

      /**Private methods sets all call backs to null */ 
      void null_callback_storage();

      /**Private data declares on Enter as call back data type used to hold call back*/ 
      enter_callback on_enter;
      /**Private data declares on Ping as call back data type used to hold call back*/ 
      ping_callback on_ping;
      /**Private data declares on Pong as call back data type used to hold call back*/ 
      pong_callback on_pong;
      /**Private data declares on Exit as call back data type used to hold call back*/ 
      exit_callback on_exit;
      /**Private data declares on Raw_Data as call back data type used to hold call back*/ 
      raw_data_callback on_raw_data;
      /**Private data declares on Connection_Request as call back data type used to hold call back*/ 
      connection_request_callback on_connection_request;
      /**Private data declares on Connection_Reply as call back data type used to hold call back*/ 
      connection_reply_callback on_connection_reply;
      /**Private data declares on Vehicle_Identification as call back data type used to hold call back*/ 
      vehicle_identification_callback on_vehicle_identification;
      /**Private data declares on Vehicle_Authorization_Request as call back data type used to hold call back*/ 
      vehicle_authorization_request_callback on_vehicle_authorization_request;
      /**Private data declares on Vehicle_Authorization_Reply as call back data type used to hold call back*/ 
      vehicle_authorization_reply_callback on_vehicle_authorization_reply;
      /**Private data declares on Vehicle_Mode_Command as call back data type used to hold call back*/ 
      vehicle_mode_command_callback on_vehicle_mode_command;
      /**Private data declares on Vehicle_Joystick_Command as call back data type used to hold call back*/ 
      vehicle_joystick_command_callback on_vehicle_joystick_command;
      /**Private data declares on Vehicle_Termination_Command as call back data type used to hold call back*/ 
      vehicle_termination_command_callback on_vehicle_termination_command;
      /**Private data declares on Vehicle_Telemetry_Command as call back data type used to hold call back*/ 
      vehicle_telemetry_command_callback on_vehicle_telemetry_command;
      /**Private data declares on Vehicle_System_Status as call back data type used to hold call back*/ 
      vehicle_system_status_callback on_vehicle_system_status;
      /**Private data declares on Vehicle_Inertial_State as call back data type used to hold call back*/ 
      vehicle_inertial_state_callback on_vehicle_inertial_state;
      /**Private data declares on Vehicle_Global_Position as call back data type used to hold call back*/ 
      vehicle_global_position_callback on_vehicle_global_position;
      /**Private data declares on Vehicle_Body_Sensed_State as call back data type used to hold call back*/ 
      vehicle_body_sensed_state_callback on_vehicle_body_sensed_state;
      /**Private data declares on Vehicle_Attitude as call back data type used to hold call back*/ 
      vehicle_attitude_callback on_vehicle_attitude;
      /**Private data declares on Air_Vehicle_Ground_Relative_State as call back data type used to hold call back*/ 
      air_vehicle_ground_relative_state_callback on_air_vehicle_ground_relative_state;
      /**Private data declares on Payload_Bay_Command as call back data type used to hold call back*/ 
      payload_bay_command_callback on_payload_bay_command;
      /**Private data declares on Payload_Data_Recorder_Command as call back data type used to hold call back*/ 
      payload_data_recorder_command_callback on_payload_data_recorder_command;
      /**Private data declares on Payload_Operation_Command as call back data type used to hold call back*/ 
      payload_operation_command_callback on_payload_operation_command;
      /**Private data declares on Communications_Payload_Command as call back data type used to hold call back*/ 
      communications_payload_command_callback on_communications_payload_command;
      /**Private data declares on Communications_Payload_Configuration_Command as call back data type used to hold call back*/ 
      communications_payload_configuration_command_callback on_communications_payload_configuration_command;
      /**Private data declares on Payload_Bay_Mode_Command as call back data type used to hold call back*/ 
      payload_bay_mode_command_callback on_payload_bay_mode_command;
      /**Private data declares on Payload_Bay_Status as call back data type used to hold call back*/ 
      payload_bay_status_callback on_payload_bay_status;
      /**Private data declares on Payload_Data_Recorder_Status as call back data type used to hold call back*/ 
      payload_data_recorder_status_callback on_payload_data_recorder_status;
      /**Private data declares on Payload_Operating_Status as call back data type used to hold call back*/ 
      payload_operating_status_callback on_payload_operating_status;
      /**Private data declares on Communications_Payload_Status as call back data type used to hold call back*/ 
      communications_payload_status_callback on_communications_payload_status;
      /**Private data declares on Target_Status as call back data type used to hold call back*/ 
      target_status_callback on_target_status;
      /**Private data declares on Target_Acknowledgement as call back data type used to hold call back*/ 
      target_acknowledgement_callback on_target_acknowledgement;
      /**Private data declares on UAV_Location as call back data type used to hold call back*/ 
      UAV_location_callback on_UAV_location;
      /**Private data declares on UAV_Speed as call back data type used to hold call back*/ 
      UAV_speed_callback on_UAV_speed;
      /**Private data declares on UAV_Heading as call back data type used to hold call back*/ 
      UAV_heading_callback on_UAV_heading;
      /**Private data declares on UAV_Battery as call back data type used to hold call back*/ 
      UAV_battery_callback on_UAV_battery;
      /**Private data declares on UAV_Collision_Avodiance_Status as call back data type used to hold call back*/ 
      UAV_collision_avodiance_status_callback on_UAV_collision_avodiance_status;
      /**Private data declares on UAV_Mission_Status as call back data type used to hold call back*/ 
      UAV_mission_status_callback on_UAV_mission_status;
      /**Private data declares on UAV_Collision_Avodiance_Message as call back data type used to hold call back*/ 
      UAV_collision_avodiance_message_callback on_UAV_collision_avodiance_message;
      /**Private data declares on UUV_Status as call back data type used to hold call back*/ 
      UUV_status_callback on_UUV_status;
      /**Private data declares on ROV_Status_Message as call back data type used to hold call back*/ 
      ROV_status_message_callback on_ROV_status_message;
   };
}
#endif